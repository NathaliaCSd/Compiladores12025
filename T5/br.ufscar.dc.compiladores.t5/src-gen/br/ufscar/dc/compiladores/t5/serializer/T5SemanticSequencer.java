/*
 * generated by Xtext 2.39.0
 */
package br.ufscar.dc.compiladores.t5.serializer;

import br.ufscar.dc.compiladores.t5.services.T5GrammarAccess;
import br.ufscar.dc.compiladores.t5.t5.ComandoAtribuicao;
import br.ufscar.dc.compiladores.t5.t5.ComandoCaso;
import br.ufscar.dc.compiladores.t5.t5.ComandoChamada;
import br.ufscar.dc.compiladores.t5.t5.ComandoEnquanto;
import br.ufscar.dc.compiladores.t5.t5.ComandoEscreva;
import br.ufscar.dc.compiladores.t5.t5.ComandoFaca;
import br.ufscar.dc.compiladores.t5.t5.ComandoLeia;
import br.ufscar.dc.compiladores.t5.t5.ComandoPara;
import br.ufscar.dc.compiladores.t5.t5.ComandoRetorne;
import br.ufscar.dc.compiladores.t5.t5.ComandoSe;
import br.ufscar.dc.compiladores.t5.t5.Corpo;
import br.ufscar.dc.compiladores.t5.t5.DeclaracaoGlobal;
import br.ufscar.dc.compiladores.t5.t5.DeclaracaoLocal;
import br.ufscar.dc.compiladores.t5.t5.Dimensao;
import br.ufscar.dc.compiladores.t5.t5.Expressao;
import br.ufscar.dc.compiladores.t5.t5.ExpressaoAritmetica;
import br.ufscar.dc.compiladores.t5.t5.ExpressaoRelacional;
import br.ufscar.dc.compiladores.t5.t5.FatorAritmetico;
import br.ufscar.dc.compiladores.t5.t5.Identificador;
import br.ufscar.dc.compiladores.t5.t5.ItemSelecao;
import br.ufscar.dc.compiladores.t5.t5.NumeroIntervalo;
import br.ufscar.dc.compiladores.t5.t5.OutroFatorAritmetico;
import br.ufscar.dc.compiladores.t5.t5.OutroTermoAritmetico;
import br.ufscar.dc.compiladores.t5.t5.Parametro;
import br.ufscar.dc.compiladores.t5.t5.Parametros;
import br.ufscar.dc.compiladores.t5.t5.Programa;
import br.ufscar.dc.compiladores.t5.t5.Registro;
import br.ufscar.dc.compiladores.t5.t5.Selecao;
import br.ufscar.dc.compiladores.t5.t5.T5Package;
import br.ufscar.dc.compiladores.t5.t5.TermoAritmetico;
import br.ufscar.dc.compiladores.t5.t5.TermoLogico;
import br.ufscar.dc.compiladores.t5.t5.Tipo;
import br.ufscar.dc.compiladores.t5.t5.TipoEstendido;
import br.ufscar.dc.compiladores.t5.t5.Variavel;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class T5SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private T5GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == T5Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case T5Package.COMANDO_ATRIBUICAO:
				sequence_ComandoAtribuicao(context, (ComandoAtribuicao) semanticObject); 
				return; 
			case T5Package.COMANDO_CASO:
				sequence_ComandoCaso(context, (ComandoCaso) semanticObject); 
				return; 
			case T5Package.COMANDO_CHAMADA:
				sequence_ComandoChamada(context, (ComandoChamada) semanticObject); 
				return; 
			case T5Package.COMANDO_ENQUANTO:
				sequence_ComandoEnquanto(context, (ComandoEnquanto) semanticObject); 
				return; 
			case T5Package.COMANDO_ESCREVA:
				sequence_ComandoEscreva(context, (ComandoEscreva) semanticObject); 
				return; 
			case T5Package.COMANDO_FACA:
				sequence_ComandoFaca(context, (ComandoFaca) semanticObject); 
				return; 
			case T5Package.COMANDO_LEIA:
				sequence_ComandoLeia(context, (ComandoLeia) semanticObject); 
				return; 
			case T5Package.COMANDO_PARA:
				sequence_ComandoPara(context, (ComandoPara) semanticObject); 
				return; 
			case T5Package.COMANDO_RETORNE:
				sequence_ComandoRetorne(context, (ComandoRetorne) semanticObject); 
				return; 
			case T5Package.COMANDO_SE:
				sequence_ComandoSe(context, (ComandoSe) semanticObject); 
				return; 
			case T5Package.CORPO:
				sequence_Corpo(context, (Corpo) semanticObject); 
				return; 
			case T5Package.DECLARACAO_GLOBAL:
				sequence_DeclaracaoGlobal(context, (DeclaracaoGlobal) semanticObject); 
				return; 
			case T5Package.DECLARACAO_LOCAL:
				sequence_DeclaracaoLocal(context, (DeclaracaoLocal) semanticObject); 
				return; 
			case T5Package.DIMENSAO:
				sequence_Dimensao(context, (Dimensao) semanticObject); 
				return; 
			case T5Package.EXPRESSAO:
				sequence_Expressao(context, (Expressao) semanticObject); 
				return; 
			case T5Package.EXPRESSAO_ARITMETICA:
				sequence_ExpressaoAritmetica(context, (ExpressaoAritmetica) semanticObject); 
				return; 
			case T5Package.EXPRESSAO_RELACIONAL:
				sequence_ExpressaoRelacional(context, (ExpressaoRelacional) semanticObject); 
				return; 
			case T5Package.FATOR_ARITMETICO:
				sequence_FatorAritmetico(context, (FatorAritmetico) semanticObject); 
				return; 
			case T5Package.IDENTIFICADOR:
				sequence_Identificador(context, (Identificador) semanticObject); 
				return; 
			case T5Package.ITEM_SELECAO:
				sequence_ItemSelecao(context, (ItemSelecao) semanticObject); 
				return; 
			case T5Package.NUMERO_INTERVALO:
				sequence_NumeroIntervalo(context, (NumeroIntervalo) semanticObject); 
				return; 
			case T5Package.OUTRO_FATOR_ARITMETICO:
				sequence_OutroFatorAritmetico(context, (OutroFatorAritmetico) semanticObject); 
				return; 
			case T5Package.OUTRO_TERMO_ARITMETICO:
				sequence_OutroTermoAritmetico(context, (OutroTermoAritmetico) semanticObject); 
				return; 
			case T5Package.PARAMETRO:
				sequence_Parametro(context, (Parametro) semanticObject); 
				return; 
			case T5Package.PARAMETROS:
				sequence_Parametros(context, (Parametros) semanticObject); 
				return; 
			case T5Package.PROGRAMA:
				sequence_Programa(context, (Programa) semanticObject); 
				return; 
			case T5Package.REGISTRO:
				sequence_Registro(context, (Registro) semanticObject); 
				return; 
			case T5Package.SELECAO:
				sequence_Selecao(context, (Selecao) semanticObject); 
				return; 
			case T5Package.TERMO_ARITMETICO:
				sequence_TermoAritmetico(context, (TermoAritmetico) semanticObject); 
				return; 
			case T5Package.TERMO_LOGICO:
				sequence_TermoLogico(context, (TermoLogico) semanticObject); 
				return; 
			case T5Package.TIPO:
				sequence_Tipo(context, (Tipo) semanticObject); 
				return; 
			case T5Package.TIPO_ESTENDIDO:
				sequence_TipoEstendido(context, (TipoEstendido) semanticObject); 
				return; 
			case T5Package.VARIAVEL:
				sequence_Variavel(context, (Variavel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoAtribuicao
	 *     ComandoAtribuicao returns ComandoAtribuicao
	 *
	 * Constraint:
	 *     (target=[Variavel|ID] valor=Expressao)
	 * </pre>
	 */
	protected void sequence_ComandoAtribuicao(ISerializationContext context, ComandoAtribuicao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.COMANDO_ATRIBUICAO__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.COMANDO_ATRIBUICAO__TARGET));
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.COMANDO_ATRIBUICAO__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.COMANDO_ATRIBUICAO__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoAtribuicaoAccess().getTargetVariavelIDTerminalRuleCall_1_0_1(), semanticObject.eGet(T5Package.Literals.COMANDO_ATRIBUICAO__TARGET, false));
		feeder.accept(grammarAccess.getComandoAtribuicaoAccess().getValorExpressaoParserRuleCall_3_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoCaso
	 *     ComandoCaso returns ComandoCaso
	 *
	 * Constraint:
	 *     (exp=ExpressaoAritmetica selecao+=Selecao* comandosElse+=Comando*)
	 * </pre>
	 */
	protected void sequence_ComandoCaso(ISerializationContext context, ComandoCaso semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoChamada
	 *     ComandoChamada returns ComandoChamada
	 *
	 * Constraint:
	 *     (name=ID (args+=Expressao args+=Expressao*)?)
	 * </pre>
	 */
	protected void sequence_ComandoChamada(ISerializationContext context, ComandoChamada semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoEnquanto
	 *     ComandoEnquanto returns ComandoEnquanto
	 *
	 * Constraint:
	 *     (cond=Expressao comandos+=Comando*)
	 * </pre>
	 */
	protected void sequence_ComandoEnquanto(ISerializationContext context, ComandoEnquanto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoEscreva
	 *     ComandoEscreva returns ComandoEscreva
	 *
	 * Constraint:
	 *     (exp+=Expressao exp+=Expressao*)
	 * </pre>
	 */
	protected void sequence_ComandoEscreva(ISerializationContext context, ComandoEscreva semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoFaca
	 *     ComandoFaca returns ComandoFaca
	 *
	 * Constraint:
	 *     (comandos+=Comando* cond=Expressao)
	 * </pre>
	 */
	protected void sequence_ComandoFaca(ISerializationContext context, ComandoFaca semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoLeia
	 *     ComandoLeia returns ComandoLeia
	 *
	 * Constraint:
	 *     (alvo+=[Variavel|ID] alvo+=[Variavel|ID]*)
	 * </pre>
	 */
	protected void sequence_ComandoLeia(ISerializationContext context, ComandoLeia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoPara
	 *     ComandoPara returns ComandoPara
	 *
	 * Constraint:
	 *     (var=ID inicio=ExpressaoAritmetica fim=ExpressaoAritmetica comandos+=Comando*)
	 * </pre>
	 */
	protected void sequence_ComandoPara(ISerializationContext context, ComandoPara semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoRetorne
	 *     ComandoRetorne returns ComandoRetorne
	 *
	 * Constraint:
	 *     exp=Expressao
	 * </pre>
	 */
	protected void sequence_ComandoRetorne(ISerializationContext context, ComandoRetorne semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.COMANDO_RETORNE__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.COMANDO_RETORNE__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoRetorneAccess().getExpExpressaoParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoSe
	 *     ComandoSe returns ComandoSe
	 *
	 * Constraint:
	 *     (cond=Expressao comandos+=Comando* comandosElse+=Comando*)
	 * </pre>
	 */
	protected void sequence_ComandoSe(ISerializationContext context, ComandoSe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Corpo returns Corpo
	 *
	 * Constraint:
	 *     (locais+=DeclaracaoLocal* comandos+=Comando*)
	 * </pre>
	 */
	protected void sequence_Corpo(ISerializationContext context, Corpo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaracao returns DeclaracaoGlobal
	 *     DeclaracaoGlobal returns DeclaracaoGlobal
	 *
	 * Constraint:
	 *     ((name=ID parametros=Parametros? corpo=Corpo) | (name=ID parametros=Parametros? tipoRetorno=TipoEstendido corpo=Corpo))
	 * </pre>
	 */
	protected void sequence_DeclaracaoGlobal(ISerializationContext context, DeclaracaoGlobal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaracao returns DeclaracaoLocal
	 *     DeclaracaoLocal returns DeclaracaoLocal
	 *
	 * Constraint:
	 *     ((variaveis+=Variavel variaveis+=Variavel*) | (name=ID tipoBasico=TipoBasico valor=ValorConstante) | (name=ID tipoDef=Tipo))
	 * </pre>
	 */
	protected void sequence_DeclaracaoLocal(ISerializationContext context, DeclaracaoLocal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dimensao returns Dimensao
	 *
	 * Constraint:
	 *     exp=ExpressaoAritmetica
	 * </pre>
	 */
	protected void sequence_Dimensao(ISerializationContext context, Dimensao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.DIMENSAO__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.DIMENSAO__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDimensaoAccess().getExpExpressaoAritmeticaParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressaoAritmetica returns ExpressaoAritmetica
	 *
	 * Constraint:
	 *     (termos+=TermoAritmetico outros+=OutroTermoAritmetico*)
	 * </pre>
	 */
	protected void sequence_ExpressaoAritmetica(ISerializationContext context, ExpressaoAritmetica semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressaoRelacional returns ExpressaoRelacional
	 *
	 * Constraint:
	 *     (left=ExpressaoAritmetica (op=OpRel right=ExpressaoAritmetica)?)
	 * </pre>
	 */
	protected void sequence_ExpressaoRelacional(ISerializationContext context, ExpressaoRelacional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expressao returns Expressao
	 *
	 * Constraint:
	 *     (logicos+=TermoLogico (op+=OpBool logicos+=TermoLogico)*)
	 * </pre>
	 */
	protected void sequence_Expressao(ISerializationContext context, Expressao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FatorAritmetico returns FatorAritmetico
	 *
	 * Constraint:
	 *     (ref=[Variavel|ID] | numero=INT | real=REAL | exp=ExpressaoAritmetica | str=STRING)
	 * </pre>
	 */
	protected void sequence_FatorAritmetico(ISerializationContext context, FatorAritmetico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Identificador returns Identificador
	 *
	 * Constraint:
	 *     (name=ID parts+=ID* dimensoes+=Dimensao*)
	 * </pre>
	 */
	protected void sequence_Identificador(ISerializationContext context, Identificador semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ItemSelecao returns ItemSelecao
	 *
	 * Constraint:
	 *     (faixas+=NumeroIntervalo faixas+=NumeroIntervalo*)
	 * </pre>
	 */
	protected void sequence_ItemSelecao(ISerializationContext context, ItemSelecao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NumeroIntervalo returns NumeroIntervalo
	 *
	 * Constraint:
	 *     (sinal?=OpUnario start=INT end=INT?)
	 * </pre>
	 */
	protected void sequence_NumeroIntervalo(ISerializationContext context, NumeroIntervalo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OutroFatorAritmetico returns OutroFatorAritmetico
	 *
	 * Constraint:
	 *     (op=OpArit2 fator=FatorAritmetico)
	 * </pre>
	 */
	protected void sequence_OutroFatorAritmetico(ISerializationContext context, OutroFatorAritmetico semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.OUTRO_FATOR_ARITMETICO__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.OUTRO_FATOR_ARITMETICO__OP));
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.OUTRO_FATOR_ARITMETICO__FATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.OUTRO_FATOR_ARITMETICO__FATOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutroFatorAritmeticoAccess().getOpOpArit2ParserRuleCall_0_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getOutroFatorAritmeticoAccess().getFatorFatorAritmeticoParserRuleCall_1_0(), semanticObject.getFator());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OutroTermoAritmetico returns OutroTermoAritmetico
	 *
	 * Constraint:
	 *     (op=OpArit1 termo=TermoAritmetico)
	 * </pre>
	 */
	protected void sequence_OutroTermoAritmetico(ISerializationContext context, OutroTermoAritmetico semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.OUTRO_TERMO_ARITMETICO__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.OUTRO_TERMO_ARITMETICO__OP));
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.OUTRO_TERMO_ARITMETICO__TERMO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.OUTRO_TERMO_ARITMETICO__TERMO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutroTermoAritmeticoAccess().getOpOpArit1ParserRuleCall_0_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getOutroTermoAritmeticoAccess().getTermoTermoAritmeticoParserRuleCall_1_0(), semanticObject.getTermo());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parametro returns Parametro
	 *
	 * Constraint:
	 *     (ids+=Identificador ids+=Identificador* tipoParam=TipoEstendido)
	 * </pre>
	 */
	protected void sequence_Parametro(ISerializationContext context, Parametro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parametros returns Parametros
	 *
	 * Constraint:
	 *     (parametro+=Parametro parametro+=Parametro*)
	 * </pre>
	 */
	protected void sequence_Parametros(ISerializationContext context, Parametros semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Programa returns Programa
	 *
	 * Constraint:
	 *     (declaracoes+=Declaracao+ corpo=Corpo)
	 * </pre>
	 */
	protected void sequence_Programa(ISerializationContext context, Programa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Registro returns Registro
	 *
	 * Constraint:
	 *     campos+=Variavel*
	 * </pre>
	 */
	protected void sequence_Registro(ISerializationContext context, Registro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Selecao returns Selecao
	 *
	 * Constraint:
	 *     (itens+=ItemSelecao+ comandos+=Comando*)
	 * </pre>
	 */
	protected void sequence_Selecao(ISerializationContext context, Selecao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TermoAritmetico returns TermoAritmetico
	 *
	 * Constraint:
	 *     (fatores+=FatorAritmetico outros+=OutroFatorAritmetico*)
	 * </pre>
	 */
	protected void sequence_TermoAritmetico(ISerializationContext context, TermoAritmetico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TermoLogico returns TermoLogico
	 *
	 * Constraint:
	 *     (nao?='nao'? rel=ExpressaoRelacional)
	 * </pre>
	 */
	protected void sequence_TermoLogico(ISerializationContext context, TermoLogico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TipoEstendido returns TipoEstendido
	 *
	 * Constraint:
	 *     (basic=TipoBasico | ref=[Declaracao|ID])
	 * </pre>
	 */
	protected void sequence_TipoEstendido(ISerializationContext context, TipoEstendido semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tipo returns Tipo
	 *
	 * Constraint:
	 *     (registro=Registro | tipoExt=TipoEstendido)
	 * </pre>
	 */
	protected void sequence_Tipo(ISerializationContext context, Tipo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variavel returns Variavel
	 *
	 * Constraint:
	 *     (id=Identificador tipoVar=Tipo)
	 * </pre>
	 */
	protected void sequence_Variavel(ISerializationContext context, Variavel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.VARIAVEL__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.VARIAVEL__ID));
			if (transientValues.isValueTransient(semanticObject, T5Package.Literals.VARIAVEL__TIPO_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, T5Package.Literals.VARIAVEL__TIPO_VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariavelAccess().getIdIdentificadorParserRuleCall_0_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getVariavelAccess().getTipoVarTipoParserRuleCall_2_0(), semanticObject.getTipoVar());
		feeder.finish();
	}
	
	
}
