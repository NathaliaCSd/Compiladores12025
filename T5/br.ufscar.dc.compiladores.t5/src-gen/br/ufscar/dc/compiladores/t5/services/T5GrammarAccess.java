/*
 * generated by Xtext 2.39.0
 */
package br.ufscar.dc.compiladores.t5.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class T5GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDECLARACOESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclaracoesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaracoesDeclaracaoParserRuleCall_1_0 = (RuleCall)cDeclaracoesAssignment_1.eContents().get(0);
		private final Keyword cALGORITMOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCorpoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCorpoCorpoParserRuleCall_3_0 = (RuleCall)cCorpoAssignment_3.eContents().get(0);
		private final Keyword cFIM_ALGORITMOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Programa:
		//    'DECLARACOES' declaracoes+=Declaracao+
		//    'ALGORITMO' corpo=Corpo 'FIM_ALGORITMO'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'DECLARACOES' declaracoes+=Declaracao+
		//'ALGORITMO' corpo=Corpo 'FIM_ALGORITMO'
		public Group getGroup() { return cGroup; }
		
		//'DECLARACOES'
		public Keyword getDECLARACOESKeyword_0() { return cDECLARACOESKeyword_0; }
		
		//declaracoes+=Declaracao+
		public Assignment getDeclaracoesAssignment_1() { return cDeclaracoesAssignment_1; }
		
		//Declaracao
		public RuleCall getDeclaracoesDeclaracaoParserRuleCall_1_0() { return cDeclaracoesDeclaracaoParserRuleCall_1_0; }
		
		//'ALGORITMO'
		public Keyword getALGORITMOKeyword_2() { return cALGORITMOKeyword_2; }
		
		//corpo=Corpo
		public Assignment getCorpoAssignment_3() { return cCorpoAssignment_3; }
		
		//Corpo
		public RuleCall getCorpoCorpoParserRuleCall_3_0() { return cCorpoCorpoParserRuleCall_3_0; }
		
		//'FIM_ALGORITMO'
		public Keyword getFIM_ALGORITMOKeyword_4() { return cFIM_ALGORITMOKeyword_4; }
	}
	public class DeclaracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Declaracao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaracaoLocalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaracaoGlobalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaracao:
		//      DeclaracaoLocal
		//    | DeclaracaoGlobal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  DeclaracaoLocal
		//| DeclaracaoGlobal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclaracaoLocal
		public RuleCall getDeclaracaoLocalParserRuleCall_0() { return cDeclaracaoLocalParserRuleCall_0; }
		
		//DeclaracaoGlobal
		public RuleCall getDeclaracaoGlobalParserRuleCall_1() { return cDeclaracaoGlobalParserRuleCall_1; }
	}
	public class DeclaracaoLocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.DeclaracaoLocal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDeclareKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVariaveisAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariaveisVariavelParserRuleCall_0_1_0 = (RuleCall)cVariaveisAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cVariaveisAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cVariaveisVariavelParserRuleCall_0_2_1_0 = (RuleCall)cVariaveisAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConstanteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTipoBasicoAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTipoBasicoTipoBasicoParserRuleCall_1_3_0 = (RuleCall)cTipoBasicoAssignment_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cValorAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cValorValorConstanteParserRuleCall_1_5_0 = (RuleCall)cValorAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cTipoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTipoDefAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTipoDefTipoParserRuleCall_2_3_0 = (RuleCall)cTipoDefAssignment_2_3.eContents().get(0);
		
		//DeclaracaoLocal:
		//      'declare' variaveis+=Variavel (',' variaveis+=Variavel)*
		//    | 'constante' name=ID ':' tipoBasico=TipoBasico '=' valor=ValorConstante
		//    | 'tipo' name=ID ':' tipoDef=Tipo
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'declare' variaveis+=Variavel (',' variaveis+=Variavel)*
		//| 'constante' name=ID ':' tipoBasico=TipoBasico '=' valor=ValorConstante
		//| 'tipo' name=ID ':' tipoDef=Tipo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'declare' variaveis+=Variavel (',' variaveis+=Variavel)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'declare'
		public Keyword getDeclareKeyword_0_0() { return cDeclareKeyword_0_0; }
		
		//variaveis+=Variavel
		public Assignment getVariaveisAssignment_0_1() { return cVariaveisAssignment_0_1; }
		
		//Variavel
		public RuleCall getVariaveisVariavelParserRuleCall_0_1_0() { return cVariaveisVariavelParserRuleCall_0_1_0; }
		
		//(',' variaveis+=Variavel)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//variaveis+=Variavel
		public Assignment getVariaveisAssignment_0_2_1() { return cVariaveisAssignment_0_2_1; }
		
		//Variavel
		public RuleCall getVariaveisVariavelParserRuleCall_0_2_1_0() { return cVariaveisVariavelParserRuleCall_0_2_1_0; }
		
		//'constante' name=ID ':' tipoBasico=TipoBasico '=' valor=ValorConstante
		public Group getGroup_1() { return cGroup_1; }
		
		//'constante'
		public Keyword getConstanteKeyword_1_0() { return cConstanteKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//tipoBasico=TipoBasico
		public Assignment getTipoBasicoAssignment_1_3() { return cTipoBasicoAssignment_1_3; }
		
		//TipoBasico
		public RuleCall getTipoBasicoTipoBasicoParserRuleCall_1_3_0() { return cTipoBasicoTipoBasicoParserRuleCall_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }
		
		//valor=ValorConstante
		public Assignment getValorAssignment_1_5() { return cValorAssignment_1_5; }
		
		//ValorConstante
		public RuleCall getValorValorConstanteParserRuleCall_1_5_0() { return cValorValorConstanteParserRuleCall_1_5_0; }
		
		//'tipo' name=ID ':' tipoDef=Tipo
		public Group getGroup_2() { return cGroup_2; }
		
		//'tipo'
		public Keyword getTipoKeyword_2_0() { return cTipoKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//tipoDef=Tipo
		public Assignment getTipoDefAssignment_2_3() { return cTipoDefAssignment_2_3; }
		
		//Tipo
		public RuleCall getTipoDefTipoParserRuleCall_2_3_0() { return cTipoDefTipoParserRuleCall_2_3_0; }
	}
	public class DeclaracaoGlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.DeclaracaoGlobal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cProcedimentoKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cParametrosAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cParametrosParametrosParserRuleCall_0_3_0 = (RuleCall)cParametrosAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cCorpoAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cCorpoCorpoParserRuleCall_0_5_0 = (RuleCall)cCorpoAssignment_0_5.eContents().get(0);
		private final Keyword cFim_procedimentoKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFuncaoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cParametrosAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cParametrosParametrosParserRuleCall_1_3_0 = (RuleCall)cParametrosAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cColonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cTipoRetornoAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cTipoRetornoTipoEstendidoParserRuleCall_1_6_0 = (RuleCall)cTipoRetornoAssignment_1_6.eContents().get(0);
		private final Assignment cCorpoAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cCorpoCorpoParserRuleCall_1_7_0 = (RuleCall)cCorpoAssignment_1_7.eContents().get(0);
		private final Keyword cFim_funcaoKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		//DeclaracaoGlobal:
		//      'procedimento' name=ID '(' (parametros=Parametros)? ')' corpo=Corpo 'fim_procedimento'
		//    | 'funcao' name=ID '(' (parametros=Parametros)? ')' ':' tipoRetorno=TipoEstendido corpo=Corpo 'fim_funcao'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'procedimento' name=ID '(' (parametros=Parametros)? ')' corpo=Corpo 'fim_procedimento'
		//| 'funcao' name=ID '(' (parametros=Parametros)? ')' ':' tipoRetorno=TipoEstendido corpo=Corpo 'fim_funcao'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'procedimento' name=ID '(' (parametros=Parametros)? ')' corpo=Corpo 'fim_procedimento'
		public Group getGroup_0() { return cGroup_0; }
		
		//'procedimento'
		public Keyword getProcedimentoKeyword_0_0() { return cProcedimentoKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//(parametros=Parametros)?
		public Assignment getParametrosAssignment_0_3() { return cParametrosAssignment_0_3; }
		
		//Parametros
		public RuleCall getParametrosParametrosParserRuleCall_0_3_0() { return cParametrosParametrosParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//corpo=Corpo
		public Assignment getCorpoAssignment_0_5() { return cCorpoAssignment_0_5; }
		
		//Corpo
		public RuleCall getCorpoCorpoParserRuleCall_0_5_0() { return cCorpoCorpoParserRuleCall_0_5_0; }
		
		//'fim_procedimento'
		public Keyword getFim_procedimentoKeyword_0_6() { return cFim_procedimentoKeyword_0_6; }
		
		//'funcao' name=ID '(' (parametros=Parametros)? ')' ':' tipoRetorno=TipoEstendido corpo=Corpo 'fim_funcao'
		public Group getGroup_1() { return cGroup_1; }
		
		//'funcao'
		public Keyword getFuncaoKeyword_1_0() { return cFuncaoKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//(parametros=Parametros)?
		public Assignment getParametrosAssignment_1_3() { return cParametrosAssignment_1_3; }
		
		//Parametros
		public RuleCall getParametrosParametrosParserRuleCall_1_3_0() { return cParametrosParametrosParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//':'
		public Keyword getColonKeyword_1_5() { return cColonKeyword_1_5; }
		
		//tipoRetorno=TipoEstendido
		public Assignment getTipoRetornoAssignment_1_6() { return cTipoRetornoAssignment_1_6; }
		
		//TipoEstendido
		public RuleCall getTipoRetornoTipoEstendidoParserRuleCall_1_6_0() { return cTipoRetornoTipoEstendidoParserRuleCall_1_6_0; }
		
		//corpo=Corpo
		public Assignment getCorpoAssignment_1_7() { return cCorpoAssignment_1_7; }
		
		//Corpo
		public RuleCall getCorpoCorpoParserRuleCall_1_7_0() { return cCorpoCorpoParserRuleCall_1_7_0; }
		
		//'fim_funcao'
		public Keyword getFim_funcaoKeyword_1_8() { return cFim_funcaoKeyword_1_8; }
	}
	public class VariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Variavel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentificadorParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoVarTipoParserRuleCall_2_0 = (RuleCall)cTipoVarAssignment_2.eContents().get(0);
		
		//Variavel:
		//    id=Identificador ':' tipoVar=Tipo
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=Identificador ':' tipoVar=Tipo
		public Group getGroup() { return cGroup; }
		
		//id=Identificador
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Identificador
		public RuleCall getIdIdentificadorParserRuleCall_0_0() { return cIdIdentificadorParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//tipoVar=Tipo
		public Assignment getTipoVarAssignment_2() { return cTipoVarAssignment_2; }
		
		//Tipo
		public RuleCall getTipoVarTipoParserRuleCall_2_0() { return cTipoVarTipoParserRuleCall_2_0; }
	}
	public class IdentificadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Identificador");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartsIDTerminalRuleCall_1_1_0 = (RuleCall)cPartsAssignment_1_1.eContents().get(0);
		private final Assignment cDimensoesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimensoesDimensaoParserRuleCall_2_0 = (RuleCall)cDimensoesAssignment_2.eContents().get(0);
		
		//Identificador:
		//    name=ID ('.' parts+=ID)* dimensoes+=Dimensao*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('.' parts+=ID)* dimensoes+=Dimensao*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('.' parts+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//parts+=ID
		public Assignment getPartsAssignment_1_1() { return cPartsAssignment_1_1; }
		
		//ID
		public RuleCall getPartsIDTerminalRuleCall_1_1_0() { return cPartsIDTerminalRuleCall_1_1_0; }
		
		//dimensoes+=Dimensao*
		public Assignment getDimensoesAssignment_2() { return cDimensoesAssignment_2; }
		
		//Dimensao
		public RuleCall getDimensoesDimensaoParserRuleCall_2_0() { return cDimensoesDimensaoParserRuleCall_2_0; }
	}
	public class DimensaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Dimensao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoAritmeticaParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Dimensao:
		//    '[' exp=ExpressaoAritmetica ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' exp=ExpressaoAritmetica ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//exp=ExpressaoAritmetica
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpressaoAritmetica
		public RuleCall getExpExpressaoAritmeticaParserRuleCall_1_0() { return cExpExpressaoAritmeticaParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRegistroAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRegistroRegistroParserRuleCall_0_0 = (RuleCall)cRegistroAssignment_0.eContents().get(0);
		private final Assignment cTipoExtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTipoExtTipoEstendidoParserRuleCall_1_0 = (RuleCall)cTipoExtAssignment_1.eContents().get(0);
		
		//Tipo:
		//      registro=Registro
		//    | tipoExt=TipoEstendido
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  registro=Registro
		//| tipoExt=TipoEstendido
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//registro=Registro
		public Assignment getRegistroAssignment_0() { return cRegistroAssignment_0; }
		
		//Registro
		public RuleCall getRegistroRegistroParserRuleCall_0_0() { return cRegistroRegistroParserRuleCall_0_0; }
		
		//tipoExt=TipoEstendido
		public Assignment getTipoExtAssignment_1() { return cTipoExtAssignment_1; }
		
		//TipoEstendido
		public RuleCall getTipoExtTipoEstendidoParserRuleCall_1_0() { return cTipoExtTipoEstendidoParserRuleCall_1_0; }
	}
	public class RegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Registro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegistroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCamposAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCamposVariavelParserRuleCall_1_0 = (RuleCall)cCamposAssignment_1.eContents().get(0);
		private final Keyword cFim_registroKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Registro:
		//    'registro' (campos+=Variavel)* 'fim_registro'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'registro' (campos+=Variavel)* 'fim_registro'
		public Group getGroup() { return cGroup; }
		
		//'registro'
		public Keyword getRegistroKeyword_0() { return cRegistroKeyword_0; }
		
		//(campos+=Variavel)*
		public Assignment getCamposAssignment_1() { return cCamposAssignment_1; }
		
		//Variavel
		public RuleCall getCamposVariavelParserRuleCall_1_0() { return cCamposVariavelParserRuleCall_1_0; }
		
		//'fim_registro'
		public Keyword getFim_registroKeyword_2() { return cFim_registroKeyword_2; }
	}
	public class TipoEstendidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.TipoEstendido");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBasicAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBasicTipoBasicoParserRuleCall_1_0_0 = (RuleCall)cBasicAssignment_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cRefDeclaracaoCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefDeclaracaoIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefDeclaracaoCrossReference_1_1_0.eContents().get(1);
		
		//TipoEstendido:
		//    '^'? (basic=TipoBasico | ref=[Declaracao])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'^'? (basic=TipoBasico | ref=[Declaracao])
		public Group getGroup() { return cGroup; }
		
		//'^'?
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//(basic=TipoBasico | ref=[Declaracao])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//basic=TipoBasico
		public Assignment getBasicAssignment_1_0() { return cBasicAssignment_1_0; }
		
		//TipoBasico
		public RuleCall getBasicTipoBasicoParserRuleCall_1_0_0() { return cBasicTipoBasicoParserRuleCall_1_0_0; }
		
		//ref=[Declaracao]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[Declaracao]
		public CrossReference getRefDeclaracaoCrossReference_1_1_0() { return cRefDeclaracaoCrossReference_1_1_0; }
		
		//ID
		public RuleCall getRefDeclaracaoIDTerminalRuleCall_1_1_0_1() { return cRefDeclaracaoIDTerminalRuleCall_1_1_0_1; }
	}
	public class TipoBasicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.TipoBasico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLiteralKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInteiroKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogicoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TipoBasico:
		//    'literal' | 'inteiro' | 'real' | 'logico'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'literal' | 'inteiro' | 'real' | 'logico'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'literal'
		public Keyword getLiteralKeyword_0() { return cLiteralKeyword_0; }
		
		//'inteiro'
		public Keyword getInteiroKeyword_1() { return cInteiroKeyword_1; }
		
		//'real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }
		
		//'logico'
		public Keyword getLogicoKeyword_3() { return cLogicoKeyword_3; }
	}
	public class ValorConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ValorConstante");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cREALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cVerdadeiroKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFalsoKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ValorConstante:
		//    STRING | INT | REAL | 'verdadeiro' | 'falso'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT | REAL | 'verdadeiro' | 'falso'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//REAL
		public RuleCall getREALTerminalRuleCall_2() { return cREALTerminalRuleCall_2; }
		
		//'verdadeiro'
		public Keyword getVerdadeiroKeyword_3() { return cVerdadeiroKeyword_3; }
		
		//'falso'
		public Keyword getFalsoKeyword_4() { return cFalsoKeyword_4; }
	}
	public class ParametrosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Parametros");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametroAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametroParametroParserRuleCall_0_0 = (RuleCall)cParametroAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametroAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametroParametroParserRuleCall_1_1_0 = (RuleCall)cParametroAssignment_1_1.eContents().get(0);
		
		//Parametros:
		//    parametro+=Parametro (',' parametro+=Parametro)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//parametro+=Parametro (',' parametro+=Parametro)*
		public Group getGroup() { return cGroup; }
		
		//parametro+=Parametro
		public Assignment getParametroAssignment_0() { return cParametroAssignment_0; }
		
		//Parametro
		public RuleCall getParametroParametroParserRuleCall_0_0() { return cParametroParametroParserRuleCall_0_0; }
		
		//(',' parametro+=Parametro)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parametro+=Parametro
		public Assignment getParametroAssignment_1_1() { return cParametroAssignment_1_1; }
		
		//Parametro
		public RuleCall getParametroParametroParserRuleCall_1_1_0() { return cParametroParametroParserRuleCall_1_1_0; }
	}
	public class ParametroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Parametro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdsIdentificadorParserRuleCall_1_0 = (RuleCall)cIdsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdsIdentificadorParserRuleCall_2_1_0 = (RuleCall)cIdsAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTipoParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTipoParamTipoEstendidoParserRuleCall_4_0 = (RuleCall)cTipoParamAssignment_4.eContents().get(0);
		
		//Parametro:
		//    ('var')? ids+=Identificador (',' ids+=Identificador)* ':' tipoParam=TipoEstendido
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('var')? ids+=Identificador (',' ids+=Identificador)* ':' tipoParam=TipoEstendido
		public Group getGroup() { return cGroup; }
		
		//('var')?
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//ids+=Identificador
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }
		
		//Identificador
		public RuleCall getIdsIdentificadorParserRuleCall_1_0() { return cIdsIdentificadorParserRuleCall_1_0; }
		
		//(',' ids+=Identificador)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ids+=Identificador
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }
		
		//Identificador
		public RuleCall getIdsIdentificadorParserRuleCall_2_1_0() { return cIdsIdentificadorParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//tipoParam=TipoEstendido
		public Assignment getTipoParamAssignment_4() { return cTipoParamAssignment_4; }
		
		//TipoEstendido
		public RuleCall getTipoParamTipoEstendidoParserRuleCall_4_0() { return cTipoParamTipoEstendidoParserRuleCall_4_0; }
	}
	public class CorpoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Corpo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocaisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocaisDeclaracaoLocalParserRuleCall_0_0 = (RuleCall)cLocaisAssignment_0.eContents().get(0);
		private final Assignment cComandosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComandosComandoParserRuleCall_1_0 = (RuleCall)cComandosAssignment_1.eContents().get(0);
		
		//Corpo:
		//    (locais+=DeclaracaoLocal)* comandos+=Comando*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(locais+=DeclaracaoLocal)* comandos+=Comando*
		public Group getGroup() { return cGroup; }
		
		//(locais+=DeclaracaoLocal)*
		public Assignment getLocaisAssignment_0() { return cLocaisAssignment_0; }
		
		//DeclaracaoLocal
		public RuleCall getLocaisDeclaracaoLocalParserRuleCall_0_0() { return cLocaisDeclaracaoLocalParserRuleCall_0_0; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment_1() { return cComandosAssignment_1; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_1_0() { return cComandosComandoParserRuleCall_1_0; }
	}
	public class ComandoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Comando");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComandoLeiaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComandoEscrevaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComandoSeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComandoCasoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cComandoParaParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cComandoEnquantoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cComandoFacaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cComandoAtribuicaoParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cComandoChamadaParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cComandoRetorneParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Comando:
		//      ComandoLeia
		//    | ComandoEscreva
		//    | ComandoSe
		//    | ComandoCaso
		//    | ComandoPara
		//    | ComandoEnquanto
		//    | ComandoFaca
		//    | ComandoAtribuicao
		//    | ComandoChamada
		//    | ComandoRetorne
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ComandoLeia
		//| ComandoEscreva
		//| ComandoSe
		//| ComandoCaso
		//| ComandoPara
		//| ComandoEnquanto
		//| ComandoFaca
		//| ComandoAtribuicao
		//| ComandoChamada
		//| ComandoRetorne
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComandoLeia
		public RuleCall getComandoLeiaParserRuleCall_0() { return cComandoLeiaParserRuleCall_0; }
		
		//ComandoEscreva
		public RuleCall getComandoEscrevaParserRuleCall_1() { return cComandoEscrevaParserRuleCall_1; }
		
		//ComandoSe
		public RuleCall getComandoSeParserRuleCall_2() { return cComandoSeParserRuleCall_2; }
		
		//ComandoCaso
		public RuleCall getComandoCasoParserRuleCall_3() { return cComandoCasoParserRuleCall_3; }
		
		//ComandoPara
		public RuleCall getComandoParaParserRuleCall_4() { return cComandoParaParserRuleCall_4; }
		
		//ComandoEnquanto
		public RuleCall getComandoEnquantoParserRuleCall_5() { return cComandoEnquantoParserRuleCall_5; }
		
		//ComandoFaca
		public RuleCall getComandoFacaParserRuleCall_6() { return cComandoFacaParserRuleCall_6; }
		
		//ComandoAtribuicao
		public RuleCall getComandoAtribuicaoParserRuleCall_7() { return cComandoAtribuicaoParserRuleCall_7; }
		
		//ComandoChamada
		public RuleCall getComandoChamadaParserRuleCall_8() { return cComandoChamadaParserRuleCall_8; }
		
		//ComandoRetorne
		public RuleCall getComandoRetorneParserRuleCall_9() { return cComandoRetorneParserRuleCall_9; }
	}
	public class ComandoLeiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoLeia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeiaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlvoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAlvoVariavelCrossReference_3_0 = (CrossReference)cAlvoAssignment_3.eContents().get(0);
		private final RuleCall cAlvoVariavelIDTerminalRuleCall_3_0_1 = (RuleCall)cAlvoVariavelCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAlvoAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cAlvoVariavelCrossReference_4_2_0 = (CrossReference)cAlvoAssignment_4_2.eContents().get(0);
		private final RuleCall cAlvoVariavelIDTerminalRuleCall_4_2_0_1 = (RuleCall)cAlvoVariavelCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComandoLeia:
		//    // Usa '+=' para criar uma lista e aponta para Variavel
		//    'leia' '(' ('^')? alvo+=[Variavel] (',' ('^')? alvo+=[Variavel])* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Usa '+=' para criar uma lista e aponta para Variavel
		//'leia' '(' ('^')? alvo+=[Variavel] (',' ('^')? alvo+=[Variavel])* ')'
		public Group getGroup() { return cGroup; }
		
		//// Usa '+=' para criar uma lista e aponta para Variavel
		//'leia'
		public Keyword getLeiaKeyword_0() { return cLeiaKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('^')?
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
		
		//alvo+=[Variavel]
		public Assignment getAlvoAssignment_3() { return cAlvoAssignment_3; }
		
		//[Variavel]
		public CrossReference getAlvoVariavelCrossReference_3_0() { return cAlvoVariavelCrossReference_3_0; }
		
		//ID
		public RuleCall getAlvoVariavelIDTerminalRuleCall_3_0_1() { return cAlvoVariavelIDTerminalRuleCall_3_0_1; }
		
		//(',' ('^')? alvo+=[Variavel])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//('^')?
		public Keyword getCircumflexAccentKeyword_4_1() { return cCircumflexAccentKeyword_4_1; }
		
		//alvo+=[Variavel]
		public Assignment getAlvoAssignment_4_2() { return cAlvoAssignment_4_2; }
		
		//[Variavel]
		public CrossReference getAlvoVariavelCrossReference_4_2_0() { return cAlvoVariavelCrossReference_4_2_0; }
		
		//ID
		public RuleCall getAlvoVariavelIDTerminalRuleCall_4_2_0_1() { return cAlvoVariavelIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ComandoEscrevaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoEscreva");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEscrevaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressaoParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpExpressaoParserRuleCall_3_1_0 = (RuleCall)cExpAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComandoEscreva:
		//    'escreva' '(' exp+=Expressao (',' exp+=Expressao)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'escreva' '(' exp+=Expressao (',' exp+=Expressao)* ')'
		public Group getGroup() { return cGroup; }
		
		//'escreva'
		public Keyword getEscrevaKeyword_0() { return cEscrevaKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp+=Expressao
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expressao
		public RuleCall getExpExpressaoParserRuleCall_2_0() { return cExpExpressaoParserRuleCall_2_0; }
		
		//(',' exp+=Expressao)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//exp+=Expressao
		public Assignment getExpAssignment_3_1() { return cExpAssignment_3_1; }
		
		//Expressao
		public RuleCall getExpExpressaoParserRuleCall_3_1_0() { return cExpExpressaoParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComandoSeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoSe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressaoParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cEntaoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComandosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComandosComandoParserRuleCall_3_0 = (RuleCall)cComandosAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSenaoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cComandosElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComandosElseComandoParserRuleCall_4_1_0 = (RuleCall)cComandosElseAssignment_4_1.eContents().get(0);
		private final Keyword cFim_seKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComandoSe:
		//    'se' cond=Expressao 'entao' comandos+=Comando* ('senao' comandosElse+=Comando*)? 'fim_se'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'se' cond=Expressao 'entao' comandos+=Comando* ('senao' comandosElse+=Comando*)? 'fim_se'
		public Group getGroup() { return cGroup; }
		
		//'se'
		public Keyword getSeKeyword_0() { return cSeKeyword_0; }
		
		//cond=Expressao
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expressao
		public RuleCall getCondExpressaoParserRuleCall_1_0() { return cCondExpressaoParserRuleCall_1_0; }
		
		//'entao'
		public Keyword getEntaoKeyword_2() { return cEntaoKeyword_2; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment_3() { return cComandosAssignment_3; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_3_0() { return cComandosComandoParserRuleCall_3_0; }
		
		//('senao' comandosElse+=Comando*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'senao'
		public Keyword getSenaoKeyword_4_0() { return cSenaoKeyword_4_0; }
		
		//comandosElse+=Comando*
		public Assignment getComandosElseAssignment_4_1() { return cComandosElseAssignment_4_1; }
		
		//Comando
		public RuleCall getComandosElseComandoParserRuleCall_4_1_0() { return cComandosElseComandoParserRuleCall_4_1_0; }
		
		//'fim_se'
		public Keyword getFim_seKeyword_5() { return cFim_seKeyword_5; }
	}
	public class ComandoCasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoCaso");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCasoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoAritmeticaParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cSejaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelecaoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelecaoSelecaoParserRuleCall_3_0 = (RuleCall)cSelecaoAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSenaoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cComandosElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComandosElseComandoParserRuleCall_4_1_0 = (RuleCall)cComandosElseAssignment_4_1.eContents().get(0);
		private final Keyword cFim_casoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComandoCaso:
		//    'caso' exp=ExpressaoAritmetica 'seja' selecao+=Selecao* ('senao' comandosElse+=Comando*)? 'fim_caso'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'caso' exp=ExpressaoAritmetica 'seja' selecao+=Selecao* ('senao' comandosElse+=Comando*)? 'fim_caso'
		public Group getGroup() { return cGroup; }
		
		//'caso'
		public Keyword getCasoKeyword_0() { return cCasoKeyword_0; }
		
		//exp=ExpressaoAritmetica
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpressaoAritmetica
		public RuleCall getExpExpressaoAritmeticaParserRuleCall_1_0() { return cExpExpressaoAritmeticaParserRuleCall_1_0; }
		
		//'seja'
		public Keyword getSejaKeyword_2() { return cSejaKeyword_2; }
		
		//selecao+=Selecao*
		public Assignment getSelecaoAssignment_3() { return cSelecaoAssignment_3; }
		
		//Selecao
		public RuleCall getSelecaoSelecaoParserRuleCall_3_0() { return cSelecaoSelecaoParserRuleCall_3_0; }
		
		//('senao' comandosElse+=Comando*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'senao'
		public Keyword getSenaoKeyword_4_0() { return cSenaoKeyword_4_0; }
		
		//comandosElse+=Comando*
		public Assignment getComandosElseAssignment_4_1() { return cComandosElseAssignment_4_1; }
		
		//Comando
		public RuleCall getComandosElseComandoParserRuleCall_4_1_0() { return cComandosElseComandoParserRuleCall_4_1_0; }
		
		//'fim_caso'
		public Keyword getFim_casoKeyword_5() { return cFim_casoKeyword_5; }
	}
	public class ComandoParaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoPara");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInicioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInicioExpressaoAritmeticaParserRuleCall_3_0 = (RuleCall)cInicioAssignment_3.eContents().get(0);
		private final Keyword cAteKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFimAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFimExpressaoAritmeticaParserRuleCall_5_0 = (RuleCall)cFimAssignment_5.eContents().get(0);
		private final Keyword cFacaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cComandosAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComandosComandoParserRuleCall_7_0 = (RuleCall)cComandosAssignment_7.eContents().get(0);
		private final Keyword cFim_paraKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ComandoPara:
		//    'para' var=ID '<-' inicio=ExpressaoAritmetica 'ate' fim=ExpressaoAritmetica 'faca' comandos+=Comando* 'fim_para'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'para' var=ID '<-' inicio=ExpressaoAritmetica 'ate' fim=ExpressaoAritmetica 'faca' comandos+=Comando* 'fim_para'
		public Group getGroup() { return cGroup; }
		
		//'para'
		public Keyword getParaKeyword_0() { return cParaKeyword_0; }
		
		//var=ID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }
		
		//inicio=ExpressaoAritmetica
		public Assignment getInicioAssignment_3() { return cInicioAssignment_3; }
		
		//ExpressaoAritmetica
		public RuleCall getInicioExpressaoAritmeticaParserRuleCall_3_0() { return cInicioExpressaoAritmeticaParserRuleCall_3_0; }
		
		//'ate'
		public Keyword getAteKeyword_4() { return cAteKeyword_4; }
		
		//fim=ExpressaoAritmetica
		public Assignment getFimAssignment_5() { return cFimAssignment_5; }
		
		//ExpressaoAritmetica
		public RuleCall getFimExpressaoAritmeticaParserRuleCall_5_0() { return cFimExpressaoAritmeticaParserRuleCall_5_0; }
		
		//'faca'
		public Keyword getFacaKeyword_6() { return cFacaKeyword_6; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment_7() { return cComandosAssignment_7; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_7_0() { return cComandosComandoParserRuleCall_7_0; }
		
		//'fim_para'
		public Keyword getFim_paraKeyword_8() { return cFim_paraKeyword_8; }
	}
	public class ComandoEnquantoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoEnquanto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnquantoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressaoParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cFacaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComandosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComandosComandoParserRuleCall_3_0 = (RuleCall)cComandosAssignment_3.eContents().get(0);
		private final Keyword cFim_enquantoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComandoEnquanto:
		//    'enquanto' cond=Expressao 'faca' comandos+=Comando* 'fim_enquanto'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enquanto' cond=Expressao 'faca' comandos+=Comando* 'fim_enquanto'
		public Group getGroup() { return cGroup; }
		
		//'enquanto'
		public Keyword getEnquantoKeyword_0() { return cEnquantoKeyword_0; }
		
		//cond=Expressao
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expressao
		public RuleCall getCondExpressaoParserRuleCall_1_0() { return cCondExpressaoParserRuleCall_1_0; }
		
		//'faca'
		public Keyword getFacaKeyword_2() { return cFacaKeyword_2; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment_3() { return cComandosAssignment_3; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_3_0() { return cComandosComandoParserRuleCall_3_0; }
		
		//'fim_enquanto'
		public Keyword getFim_enquantoKeyword_4() { return cFim_enquantoKeyword_4; }
	}
	public class ComandoFacaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoFaca");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComandosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComandosComandoParserRuleCall_1_0 = (RuleCall)cComandosAssignment_1.eContents().get(0);
		private final Keyword cAteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExpressaoParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		
		//ComandoFaca:
		//    'faca' comandos+=Comando* 'ate' cond=Expressao
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'faca' comandos+=Comando* 'ate' cond=Expressao
		public Group getGroup() { return cGroup; }
		
		//'faca'
		public Keyword getFacaKeyword_0() { return cFacaKeyword_0; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment_1() { return cComandosAssignment_1; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_1_0() { return cComandosComandoParserRuleCall_1_0; }
		
		//'ate'
		public Keyword getAteKeyword_2() { return cAteKeyword_2; }
		
		//cond=Expressao
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expressao
		public RuleCall getCondExpressaoParserRuleCall_3_0() { return cCondExpressaoParserRuleCall_3_0; }
	}
	public class ComandoAtribuicaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoAtribuicao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetVariavelCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetVariavelIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetVariavelCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorExpressaoParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//ComandoAtribuicao:
		//    target=[Variavel] '<-' valor=Expressao
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[Variavel] '<-' valor=Expressao
		public Group getGroup() { return cGroup; }
		
		//target=[Variavel]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[Variavel]
		public CrossReference getTargetVariavelCrossReference_0_0() { return cTargetVariavelCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetVariavelIDTerminalRuleCall_0_0_1() { return cTargetVariavelIDTerminalRuleCall_0_0_1; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//valor=Expressao
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }
		
		//Expressao
		public RuleCall getValorExpressaoParserRuleCall_2_0() { return cValorExpressaoParserRuleCall_2_0; }
	}
	public class ComandoChamadaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoChamada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressaoParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressaoParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComandoChamada:
		//    name=ID '(' (args+=Expressao (',' args+=Expressao)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (args+=Expressao (',' args+=Expressao)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=Expressao (',' args+=Expressao)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Expressao
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expressao
		public RuleCall getArgsExpressaoParserRuleCall_2_0_0() { return cArgsExpressaoParserRuleCall_2_0_0; }
		
		//(',' args+=Expressao)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=Expressao
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expressao
		public RuleCall getArgsExpressaoParserRuleCall_2_1_1_0() { return cArgsExpressaoParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ComandoRetorneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ComandoRetorne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetorneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//ComandoRetorne:
		//    'retorne' exp=Expressao
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'retorne' exp=Expressao
		public Group getGroup() { return cGroup; }
		
		//'retorne'
		public Keyword getRetorneKeyword_0() { return cRetorneKeyword_0; }
		
		//exp=Expressao
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expressao
		public RuleCall getExpExpressaoParserRuleCall_1_0() { return cExpExpressaoParserRuleCall_1_0; }
	}
	public class SelecaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Selecao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cItensAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cItensItemSelecaoParserRuleCall_0_0 = (RuleCall)cItensAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComandosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComandosComandoParserRuleCall_2_0 = (RuleCall)cComandosAssignment_2.eContents().get(0);
		
		//Selecao:
		//    itens+=ItemSelecao+ ':' comandos+=Comando*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//itens+=ItemSelecao+ ':' comandos+=Comando*
		public Group getGroup() { return cGroup; }
		
		//itens+=ItemSelecao+
		public Assignment getItensAssignment_0() { return cItensAssignment_0; }
		
		//ItemSelecao
		public RuleCall getItensItemSelecaoParserRuleCall_0_0() { return cItensItemSelecaoParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//comandos+=Comando*
		public Assignment getComandosAssignment_2() { return cComandosAssignment_2; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_2_0() { return cComandosComandoParserRuleCall_2_0; }
	}
	public class ItemSelecaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ItemSelecao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFaixasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFaixasNumeroIntervaloParserRuleCall_0_0 = (RuleCall)cFaixasAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFaixasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFaixasNumeroIntervaloParserRuleCall_1_1_0 = (RuleCall)cFaixasAssignment_1_1.eContents().get(0);
		
		//ItemSelecao:
		//    faixas+=NumeroIntervalo (',' faixas+=NumeroIntervalo)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//faixas+=NumeroIntervalo (',' faixas+=NumeroIntervalo)*
		public Group getGroup() { return cGroup; }
		
		//faixas+=NumeroIntervalo
		public Assignment getFaixasAssignment_0() { return cFaixasAssignment_0; }
		
		//NumeroIntervalo
		public RuleCall getFaixasNumeroIntervaloParserRuleCall_0_0() { return cFaixasNumeroIntervaloParserRuleCall_0_0; }
		
		//(',' faixas+=NumeroIntervalo)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//faixas+=NumeroIntervalo
		public Assignment getFaixasAssignment_1_1() { return cFaixasAssignment_1_1; }
		
		//NumeroIntervalo
		public RuleCall getFaixasNumeroIntervaloParserRuleCall_1_1_0() { return cFaixasNumeroIntervaloParserRuleCall_1_1_0; }
	}
	public class NumeroIntervaloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.NumeroIntervalo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSinalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSinalOpUnarioParserRuleCall_0_0 = (RuleCall)cSinalAssignment_0.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartINTTerminalRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEndAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEndINTTerminalRuleCall_2_1_0 = (RuleCall)cEndAssignment_2_1.eContents().get(0);
		
		//NumeroIntervalo:
		//    sinal?=OpUnario start=INT ('..' end=INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sinal?=OpUnario start=INT ('..' end=INT)?
		public Group getGroup() { return cGroup; }
		
		//sinal?=OpUnario
		public Assignment getSinalAssignment_0() { return cSinalAssignment_0; }
		
		//OpUnario
		public RuleCall getSinalOpUnarioParserRuleCall_0_0() { return cSinalOpUnarioParserRuleCall_0_0; }
		
		//start=INT
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_1_0() { return cStartINTTerminalRuleCall_1_0; }
		
		//('..' end=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_0() { return cFullStopFullStopKeyword_2_0; }
		
		//end=INT
		public Assignment getEndAssignment_2_1() { return cEndAssignment_2_1; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_2_1_0() { return cEndINTTerminalRuleCall_2_1_0; }
	}
	public class OpUnarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OpUnario");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpUnario:
		//    '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class ExpressaoAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ExpressaoAritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermosTermoAritmeticoParserRuleCall_0_0 = (RuleCall)cTermosAssignment_0.eContents().get(0);
		private final Assignment cOutrosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutrosOutroTermoAritmeticoParserRuleCall_1_0 = (RuleCall)cOutrosAssignment_1.eContents().get(0);
		
		//ExpressaoAritmetica:
		//    termos+=TermoAritmetico (outros+=OutroTermoAritmetico)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//termos+=TermoAritmetico (outros+=OutroTermoAritmetico)*
		public Group getGroup() { return cGroup; }
		
		//termos+=TermoAritmetico
		public Assignment getTermosAssignment_0() { return cTermosAssignment_0; }
		
		//TermoAritmetico
		public RuleCall getTermosTermoAritmeticoParserRuleCall_0_0() { return cTermosTermoAritmeticoParserRuleCall_0_0; }
		
		//(outros+=OutroTermoAritmetico)*
		public Assignment getOutrosAssignment_1() { return cOutrosAssignment_1; }
		
		//OutroTermoAritmetico
		public RuleCall getOutrosOutroTermoAritmeticoParserRuleCall_1_0() { return cOutrosOutroTermoAritmeticoParserRuleCall_1_0; }
	}
	public class OutroTermoAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OutroTermoAritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOpArit1ParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cTermoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermoTermoAritmeticoParserRuleCall_1_0 = (RuleCall)cTermoAssignment_1.eContents().get(0);
		
		//OutroTermoAritmetico:
		//    op=OpArit1 termo=TermoAritmetico
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=OpArit1 termo=TermoAritmetico
		public Group getGroup() { return cGroup; }
		
		//op=OpArit1
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//OpArit1
		public RuleCall getOpOpArit1ParserRuleCall_0_0() { return cOpOpArit1ParserRuleCall_0_0; }
		
		//termo=TermoAritmetico
		public Assignment getTermoAssignment_1() { return cTermoAssignment_1; }
		
		//TermoAritmetico
		public RuleCall getTermoTermoAritmeticoParserRuleCall_1_0() { return cTermoTermoAritmeticoParserRuleCall_1_0; }
	}
	public class TermoAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.TermoAritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFatoresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFatoresFatorAritmeticoParserRuleCall_0_0 = (RuleCall)cFatoresAssignment_0.eContents().get(0);
		private final Assignment cOutrosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutrosOutroFatorAritmeticoParserRuleCall_1_0 = (RuleCall)cOutrosAssignment_1.eContents().get(0);
		
		//TermoAritmetico:
		//    fatores+=FatorAritmetico (outros+=OutroFatorAritmetico)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//fatores+=FatorAritmetico (outros+=OutroFatorAritmetico)*
		public Group getGroup() { return cGroup; }
		
		//fatores+=FatorAritmetico
		public Assignment getFatoresAssignment_0() { return cFatoresAssignment_0; }
		
		//FatorAritmetico
		public RuleCall getFatoresFatorAritmeticoParserRuleCall_0_0() { return cFatoresFatorAritmeticoParserRuleCall_0_0; }
		
		//(outros+=OutroFatorAritmetico)*
		public Assignment getOutrosAssignment_1() { return cOutrosAssignment_1; }
		
		//OutroFatorAritmetico
		public RuleCall getOutrosOutroFatorAritmeticoParserRuleCall_1_0() { return cOutrosOutroFatorAritmeticoParserRuleCall_1_0; }
	}
	public class OutroFatorAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OutroFatorAritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOpArit2ParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cFatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFatorFatorAritmeticoParserRuleCall_1_0 = (RuleCall)cFatorAssignment_1.eContents().get(0);
		
		//OutroFatorAritmetico:
		//    op=OpArit2 fator=FatorAritmetico
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=OpArit2 fator=FatorAritmetico
		public Group getGroup() { return cGroup; }
		
		//op=OpArit2
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//OpArit2
		public RuleCall getOpOpArit2ParserRuleCall_0_0() { return cOpOpArit2ParserRuleCall_0_0; }
		
		//fator=FatorAritmetico
		public Assignment getFatorAssignment_1() { return cFatorAssignment_1; }
		
		//FatorAritmetico
		public RuleCall getFatorFatorAritmeticoParserRuleCall_1_0() { return cFatorFatorAritmeticoParserRuleCall_1_0; }
	}
	public class FatorAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.FatorAritmetico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cRefVariavelCrossReference_0_1_0 = (CrossReference)cRefAssignment_0_1.eContents().get(0);
		private final RuleCall cRefVariavelIDTerminalRuleCall_0_1_0_1 = (RuleCall)cRefVariavelCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNumeroAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumeroINTTerminalRuleCall_1_0 = (RuleCall)cNumeroAssignment_1.eContents().get(0);
		private final Assignment cRealAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRealREALTerminalRuleCall_2_0 = (RuleCall)cRealAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpExpressaoAritmeticaParserRuleCall_3_1_0 = (RuleCall)cExpAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cStrAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStrSTRINGTerminalRuleCall_4_0 = (RuleCall)cStrAssignment_4.eContents().get(0);
		
		//FatorAritmetico:
		//    ('^')? ref=[Variavel]  // CORRIGIDO: Aponta para Variavel
		//  | numero=INT
		//  | real=REAL
		//  | '(' exp=ExpressaoAritmetica ')'
		//  | str=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ('^')? ref=[Variavel]  // CORRIGIDO: Aponta para Variavel
		//| numero=INT
		//| real=REAL
		//| '(' exp=ExpressaoAritmetica ')'
		//| str=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('^')? ref=[Variavel]
		public Group getGroup_0() { return cGroup_0; }
		
		//('^')?
		public Keyword getCircumflexAccentKeyword_0_0() { return cCircumflexAccentKeyword_0_0; }
		
		//ref=[Variavel]
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//[Variavel]
		public CrossReference getRefVariavelCrossReference_0_1_0() { return cRefVariavelCrossReference_0_1_0; }
		
		//ID
		public RuleCall getRefVariavelIDTerminalRuleCall_0_1_0_1() { return cRefVariavelIDTerminalRuleCall_0_1_0_1; }
		
		//numero=INT
		public Assignment getNumeroAssignment_1() { return cNumeroAssignment_1; }
		
		//INT
		public RuleCall getNumeroINTTerminalRuleCall_1_0() { return cNumeroINTTerminalRuleCall_1_0; }
		
		//real=REAL
		public Assignment getRealAssignment_2() { return cRealAssignment_2; }
		
		//REAL
		public RuleCall getRealREALTerminalRuleCall_2_0() { return cRealREALTerminalRuleCall_2_0; }
		
		//'(' exp=ExpressaoAritmetica ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//exp=ExpressaoAritmetica
		public Assignment getExpAssignment_3_1() { return cExpAssignment_3_1; }
		
		//ExpressaoAritmetica
		public RuleCall getExpExpressaoAritmeticaParserRuleCall_3_1_0() { return cExpExpressaoAritmeticaParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//str=STRING
		public Assignment getStrAssignment_4() { return cStrAssignment_4; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_4_0() { return cStrSTRINGTerminalRuleCall_4_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.Expressao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicosTermoLogicoParserRuleCall_0_0 = (RuleCall)cLogicosAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOpBoolParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cLogicosAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLogicosTermoLogicoParserRuleCall_1_1_0 = (RuleCall)cLogicosAssignment_1_1.eContents().get(0);
		
		//Expressao:
		//    logicos+=TermoLogico (op=OpBool logicos+=TermoLogico)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//logicos+=TermoLogico (op=OpBool logicos+=TermoLogico)*
		public Group getGroup() { return cGroup; }
		
		//logicos+=TermoLogico
		public Assignment getLogicosAssignment_0() { return cLogicosAssignment_0; }
		
		//TermoLogico
		public RuleCall getLogicosTermoLogicoParserRuleCall_0_0() { return cLogicosTermoLogicoParserRuleCall_0_0; }
		
		//(op=OpBool logicos+=TermoLogico)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op=OpBool
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//OpBool
		public RuleCall getOpOpBoolParserRuleCall_1_0_0() { return cOpOpBoolParserRuleCall_1_0_0; }
		
		//logicos+=TermoLogico
		public Assignment getLogicosAssignment_1_1() { return cLogicosAssignment_1_1; }
		
		//TermoLogico
		public RuleCall getLogicosTermoLogicoParserRuleCall_1_1_0() { return cLogicosTermoLogicoParserRuleCall_1_1_0; }
	}
	public class TermoLogicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.TermoLogico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNaoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelExpressaoRelacionalParserRuleCall_1_0 = (RuleCall)cRelAssignment_1.eContents().get(0);
		
		//TermoLogico:
		//    ('nao')? rel=ExpressaoRelacional
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('nao')? rel=ExpressaoRelacional
		public Group getGroup() { return cGroup; }
		
		//('nao')?
		public Keyword getNaoKeyword_0() { return cNaoKeyword_0; }
		
		//rel=ExpressaoRelacional
		public Assignment getRelAssignment_1() { return cRelAssignment_1; }
		
		//ExpressaoRelacional
		public RuleCall getRelExpressaoRelacionalParserRuleCall_1_0() { return cRelExpressaoRelacionalParserRuleCall_1_0; }
	}
	public class ExpressaoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.ExpressaoRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressaoAritmeticaParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOpRelParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpressaoAritmeticaParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ExpressaoRelacional:
		//    left=ExpressaoAritmetica (op=OpRel right=ExpressaoAritmetica)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ExpressaoAritmetica (op=OpRel right=ExpressaoAritmetica)?
		public Group getGroup() { return cGroup; }
		
		//left=ExpressaoAritmetica
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ExpressaoAritmetica
		public RuleCall getLeftExpressaoAritmeticaParserRuleCall_0_0() { return cLeftExpressaoAritmeticaParserRuleCall_0_0; }
		
		//(op=OpRel right=ExpressaoAritmetica)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=OpRel
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//OpRel
		public RuleCall getOpOpRelParserRuleCall_1_0_0() { return cOpOpRelParserRuleCall_1_0_0; }
		
		//right=ExpressaoAritmetica
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ExpressaoAritmetica
		public RuleCall getRightExpressaoAritmeticaParserRuleCall_1_1_0() { return cRightExpressaoAritmeticaParserRuleCall_1_1_0; }
	}
	public class OpArit1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OpArit1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpArit1:
		//    '+' | '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class OpArit2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OpArit2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpArit2:
		//    '*' | '/'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class OpRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OpRel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpRel:
		//    '>' | '>=' | '<' | '<=' | '<>' | '='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '>=' | '<' | '<=' | '<>' | '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_4() { return cLessThanSignGreaterThanSignKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
	}
	public class OpBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.OpBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOuKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpBool:
		//    'e' | 'ou'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'e' | 'ou'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'e'
		public Keyword getEKeyword_0() { return cEKeyword_0; }
		
		//'ou'
		public Keyword getOuKeyword_1() { return cOuKeyword_1; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final DeclaracaoElements pDeclaracao;
	private final DeclaracaoLocalElements pDeclaracaoLocal;
	private final DeclaracaoGlobalElements pDeclaracaoGlobal;
	private final VariavelElements pVariavel;
	private final IdentificadorElements pIdentificador;
	private final DimensaoElements pDimensao;
	private final TipoElements pTipo;
	private final RegistroElements pRegistro;
	private final TipoEstendidoElements pTipoEstendido;
	private final TipoBasicoElements pTipoBasico;
	private final ValorConstanteElements pValorConstante;
	private final ParametrosElements pParametros;
	private final ParametroElements pParametro;
	private final CorpoElements pCorpo;
	private final ComandoElements pComando;
	private final ComandoLeiaElements pComandoLeia;
	private final ComandoEscrevaElements pComandoEscreva;
	private final ComandoSeElements pComandoSe;
	private final ComandoCasoElements pComandoCaso;
	private final ComandoParaElements pComandoPara;
	private final ComandoEnquantoElements pComandoEnquanto;
	private final ComandoFacaElements pComandoFaca;
	private final ComandoAtribuicaoElements pComandoAtribuicao;
	private final ComandoChamadaElements pComandoChamada;
	private final ComandoRetorneElements pComandoRetorne;
	private final SelecaoElements pSelecao;
	private final ItemSelecaoElements pItemSelecao;
	private final NumeroIntervaloElements pNumeroIntervalo;
	private final OpUnarioElements pOpUnario;
	private final ExpressaoAritmeticaElements pExpressaoAritmetica;
	private final OutroTermoAritmeticoElements pOutroTermoAritmetico;
	private final TermoAritmeticoElements pTermoAritmetico;
	private final OutroFatorAritmeticoElements pOutroFatorAritmetico;
	private final FatorAritmeticoElements pFatorAritmetico;
	private final ExpressaoElements pExpressao;
	private final TermoLogicoElements pTermoLogico;
	private final ExpressaoRelacionalElements pExpressaoRelacional;
	private final OpArit1Elements pOpArit1;
	private final OpArit2Elements pOpArit2;
	private final OpRelElements pOpRel;
	private final OpBoolElements pOpBool;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public T5GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pDeclaracao = new DeclaracaoElements();
		this.pDeclaracaoLocal = new DeclaracaoLocalElements();
		this.pDeclaracaoGlobal = new DeclaracaoGlobalElements();
		this.pVariavel = new VariavelElements();
		this.pIdentificador = new IdentificadorElements();
		this.pDimensao = new DimensaoElements();
		this.pTipo = new TipoElements();
		this.pRegistro = new RegistroElements();
		this.pTipoEstendido = new TipoEstendidoElements();
		this.pTipoBasico = new TipoBasicoElements();
		this.pValorConstante = new ValorConstanteElements();
		this.pParametros = new ParametrosElements();
		this.pParametro = new ParametroElements();
		this.pCorpo = new CorpoElements();
		this.pComando = new ComandoElements();
		this.pComandoLeia = new ComandoLeiaElements();
		this.pComandoEscreva = new ComandoEscrevaElements();
		this.pComandoSe = new ComandoSeElements();
		this.pComandoCaso = new ComandoCasoElements();
		this.pComandoPara = new ComandoParaElements();
		this.pComandoEnquanto = new ComandoEnquantoElements();
		this.pComandoFaca = new ComandoFacaElements();
		this.pComandoAtribuicao = new ComandoAtribuicaoElements();
		this.pComandoChamada = new ComandoChamadaElements();
		this.pComandoRetorne = new ComandoRetorneElements();
		this.pSelecao = new SelecaoElements();
		this.pItemSelecao = new ItemSelecaoElements();
		this.pNumeroIntervalo = new NumeroIntervaloElements();
		this.pOpUnario = new OpUnarioElements();
		this.pExpressaoAritmetica = new ExpressaoAritmeticaElements();
		this.pOutroTermoAritmetico = new OutroTermoAritmeticoElements();
		this.pTermoAritmetico = new TermoAritmeticoElements();
		this.pOutroFatorAritmetico = new OutroFatorAritmeticoElements();
		this.pFatorAritmetico = new FatorAritmeticoElements();
		this.pExpressao = new ExpressaoElements();
		this.pTermoLogico = new TermoLogicoElements();
		this.pExpressaoRelacional = new ExpressaoRelacionalElements();
		this.pOpArit1 = new OpArit1Elements();
		this.pOpArit2 = new OpArit2Elements();
		this.pOpRel = new OpRelElements();
		this.pOpBool = new OpBoolElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.t5.T5.REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.dc.compiladores.t5.T5".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programa:
	//    'DECLARACOES' declaracoes+=Declaracao+
	//    'ALGORITMO' corpo=Corpo 'FIM_ALGORITMO'
	//;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Declaracao:
	//      DeclaracaoLocal
	//    | DeclaracaoGlobal
	//;
	public DeclaracaoElements getDeclaracaoAccess() {
		return pDeclaracao;
	}
	
	public ParserRule getDeclaracaoRule() {
		return getDeclaracaoAccess().getRule();
	}
	
	//DeclaracaoLocal:
	//      'declare' variaveis+=Variavel (',' variaveis+=Variavel)*
	//    | 'constante' name=ID ':' tipoBasico=TipoBasico '=' valor=ValorConstante
	//    | 'tipo' name=ID ':' tipoDef=Tipo
	//;
	public DeclaracaoLocalElements getDeclaracaoLocalAccess() {
		return pDeclaracaoLocal;
	}
	
	public ParserRule getDeclaracaoLocalRule() {
		return getDeclaracaoLocalAccess().getRule();
	}
	
	//DeclaracaoGlobal:
	//      'procedimento' name=ID '(' (parametros=Parametros)? ')' corpo=Corpo 'fim_procedimento'
	//    | 'funcao' name=ID '(' (parametros=Parametros)? ')' ':' tipoRetorno=TipoEstendido corpo=Corpo 'fim_funcao'
	//;
	public DeclaracaoGlobalElements getDeclaracaoGlobalAccess() {
		return pDeclaracaoGlobal;
	}
	
	public ParserRule getDeclaracaoGlobalRule() {
		return getDeclaracaoGlobalAccess().getRule();
	}
	
	//Variavel:
	//    id=Identificador ':' tipoVar=Tipo
	//;
	public VariavelElements getVariavelAccess() {
		return pVariavel;
	}
	
	public ParserRule getVariavelRule() {
		return getVariavelAccess().getRule();
	}
	
	//Identificador:
	//    name=ID ('.' parts+=ID)* dimensoes+=Dimensao*
	//;
	public IdentificadorElements getIdentificadorAccess() {
		return pIdentificador;
	}
	
	public ParserRule getIdentificadorRule() {
		return getIdentificadorAccess().getRule();
	}
	
	//Dimensao:
	//    '[' exp=ExpressaoAritmetica ']'
	//;
	public DimensaoElements getDimensaoAccess() {
		return pDimensao;
	}
	
	public ParserRule getDimensaoRule() {
		return getDimensaoAccess().getRule();
	}
	
	//Tipo:
	//      registro=Registro
	//    | tipoExt=TipoEstendido
	//;
	public TipoElements getTipoAccess() {
		return pTipo;
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}
	
	//Registro:
	//    'registro' (campos+=Variavel)* 'fim_registro'
	//;
	public RegistroElements getRegistroAccess() {
		return pRegistro;
	}
	
	public ParserRule getRegistroRule() {
		return getRegistroAccess().getRule();
	}
	
	//TipoEstendido:
	//    '^'? (basic=TipoBasico | ref=[Declaracao])
	//;
	public TipoEstendidoElements getTipoEstendidoAccess() {
		return pTipoEstendido;
	}
	
	public ParserRule getTipoEstendidoRule() {
		return getTipoEstendidoAccess().getRule();
	}
	
	//TipoBasico:
	//    'literal' | 'inteiro' | 'real' | 'logico'
	//;
	public TipoBasicoElements getTipoBasicoAccess() {
		return pTipoBasico;
	}
	
	public ParserRule getTipoBasicoRule() {
		return getTipoBasicoAccess().getRule();
	}
	
	//ValorConstante:
	//    STRING | INT | REAL | 'verdadeiro' | 'falso'
	//;
	public ValorConstanteElements getValorConstanteAccess() {
		return pValorConstante;
	}
	
	public ParserRule getValorConstanteRule() {
		return getValorConstanteAccess().getRule();
	}
	
	//Parametros:
	//    parametro+=Parametro (',' parametro+=Parametro)*
	//;
	public ParametrosElements getParametrosAccess() {
		return pParametros;
	}
	
	public ParserRule getParametrosRule() {
		return getParametrosAccess().getRule();
	}
	
	//Parametro:
	//    ('var')? ids+=Identificador (',' ids+=Identificador)* ':' tipoParam=TipoEstendido
	//;
	public ParametroElements getParametroAccess() {
		return pParametro;
	}
	
	public ParserRule getParametroRule() {
		return getParametroAccess().getRule();
	}
	
	//Corpo:
	//    (locais+=DeclaracaoLocal)* comandos+=Comando*
	//;
	public CorpoElements getCorpoAccess() {
		return pCorpo;
	}
	
	public ParserRule getCorpoRule() {
		return getCorpoAccess().getRule();
	}
	
	//Comando:
	//      ComandoLeia
	//    | ComandoEscreva
	//    | ComandoSe
	//    | ComandoCaso
	//    | ComandoPara
	//    | ComandoEnquanto
	//    | ComandoFaca
	//    | ComandoAtribuicao
	//    | ComandoChamada
	//    | ComandoRetorne
	//;
	public ComandoElements getComandoAccess() {
		return pComando;
	}
	
	public ParserRule getComandoRule() {
		return getComandoAccess().getRule();
	}
	
	//ComandoLeia:
	//    // Usa '+=' para criar uma lista e aponta para Variavel
	//    'leia' '(' ('^')? alvo+=[Variavel] (',' ('^')? alvo+=[Variavel])* ')'
	//;
	public ComandoLeiaElements getComandoLeiaAccess() {
		return pComandoLeia;
	}
	
	public ParserRule getComandoLeiaRule() {
		return getComandoLeiaAccess().getRule();
	}
	
	//ComandoEscreva:
	//    'escreva' '(' exp+=Expressao (',' exp+=Expressao)* ')'
	//;
	public ComandoEscrevaElements getComandoEscrevaAccess() {
		return pComandoEscreva;
	}
	
	public ParserRule getComandoEscrevaRule() {
		return getComandoEscrevaAccess().getRule();
	}
	
	//ComandoSe:
	//    'se' cond=Expressao 'entao' comandos+=Comando* ('senao' comandosElse+=Comando*)? 'fim_se'
	//;
	public ComandoSeElements getComandoSeAccess() {
		return pComandoSe;
	}
	
	public ParserRule getComandoSeRule() {
		return getComandoSeAccess().getRule();
	}
	
	//ComandoCaso:
	//    'caso' exp=ExpressaoAritmetica 'seja' selecao+=Selecao* ('senao' comandosElse+=Comando*)? 'fim_caso'
	//;
	public ComandoCasoElements getComandoCasoAccess() {
		return pComandoCaso;
	}
	
	public ParserRule getComandoCasoRule() {
		return getComandoCasoAccess().getRule();
	}
	
	//ComandoPara:
	//    'para' var=ID '<-' inicio=ExpressaoAritmetica 'ate' fim=ExpressaoAritmetica 'faca' comandos+=Comando* 'fim_para'
	//;
	public ComandoParaElements getComandoParaAccess() {
		return pComandoPara;
	}
	
	public ParserRule getComandoParaRule() {
		return getComandoParaAccess().getRule();
	}
	
	//ComandoEnquanto:
	//    'enquanto' cond=Expressao 'faca' comandos+=Comando* 'fim_enquanto'
	//;
	public ComandoEnquantoElements getComandoEnquantoAccess() {
		return pComandoEnquanto;
	}
	
	public ParserRule getComandoEnquantoRule() {
		return getComandoEnquantoAccess().getRule();
	}
	
	//ComandoFaca:
	//    'faca' comandos+=Comando* 'ate' cond=Expressao
	//;
	public ComandoFacaElements getComandoFacaAccess() {
		return pComandoFaca;
	}
	
	public ParserRule getComandoFacaRule() {
		return getComandoFacaAccess().getRule();
	}
	
	//ComandoAtribuicao:
	//    target=[Variavel] '<-' valor=Expressao
	//;
	public ComandoAtribuicaoElements getComandoAtribuicaoAccess() {
		return pComandoAtribuicao;
	}
	
	public ParserRule getComandoAtribuicaoRule() {
		return getComandoAtribuicaoAccess().getRule();
	}
	
	//ComandoChamada:
	//    name=ID '(' (args+=Expressao (',' args+=Expressao)*)? ')'
	//;
	public ComandoChamadaElements getComandoChamadaAccess() {
		return pComandoChamada;
	}
	
	public ParserRule getComandoChamadaRule() {
		return getComandoChamadaAccess().getRule();
	}
	
	//ComandoRetorne:
	//    'retorne' exp=Expressao
	//;
	public ComandoRetorneElements getComandoRetorneAccess() {
		return pComandoRetorne;
	}
	
	public ParserRule getComandoRetorneRule() {
		return getComandoRetorneAccess().getRule();
	}
	
	//Selecao:
	//    itens+=ItemSelecao+ ':' comandos+=Comando*
	//;
	public SelecaoElements getSelecaoAccess() {
		return pSelecao;
	}
	
	public ParserRule getSelecaoRule() {
		return getSelecaoAccess().getRule();
	}
	
	//ItemSelecao:
	//    faixas+=NumeroIntervalo (',' faixas+=NumeroIntervalo)*
	//;
	public ItemSelecaoElements getItemSelecaoAccess() {
		return pItemSelecao;
	}
	
	public ParserRule getItemSelecaoRule() {
		return getItemSelecaoAccess().getRule();
	}
	
	//NumeroIntervalo:
	//    sinal?=OpUnario start=INT ('..' end=INT)?
	//;
	public NumeroIntervaloElements getNumeroIntervaloAccess() {
		return pNumeroIntervalo;
	}
	
	public ParserRule getNumeroIntervaloRule() {
		return getNumeroIntervaloAccess().getRule();
	}
	
	//OpUnario:
	//    '-'
	//;
	public OpUnarioElements getOpUnarioAccess() {
		return pOpUnario;
	}
	
	public ParserRule getOpUnarioRule() {
		return getOpUnarioAccess().getRule();
	}
	
	//ExpressaoAritmetica:
	//    termos+=TermoAritmetico (outros+=OutroTermoAritmetico)*
	//;
	public ExpressaoAritmeticaElements getExpressaoAritmeticaAccess() {
		return pExpressaoAritmetica;
	}
	
	public ParserRule getExpressaoAritmeticaRule() {
		return getExpressaoAritmeticaAccess().getRule();
	}
	
	//OutroTermoAritmetico:
	//    op=OpArit1 termo=TermoAritmetico
	//;
	public OutroTermoAritmeticoElements getOutroTermoAritmeticoAccess() {
		return pOutroTermoAritmetico;
	}
	
	public ParserRule getOutroTermoAritmeticoRule() {
		return getOutroTermoAritmeticoAccess().getRule();
	}
	
	//TermoAritmetico:
	//    fatores+=FatorAritmetico (outros+=OutroFatorAritmetico)*
	//;
	public TermoAritmeticoElements getTermoAritmeticoAccess() {
		return pTermoAritmetico;
	}
	
	public ParserRule getTermoAritmeticoRule() {
		return getTermoAritmeticoAccess().getRule();
	}
	
	//OutroFatorAritmetico:
	//    op=OpArit2 fator=FatorAritmetico
	//;
	public OutroFatorAritmeticoElements getOutroFatorAritmeticoAccess() {
		return pOutroFatorAritmetico;
	}
	
	public ParserRule getOutroFatorAritmeticoRule() {
		return getOutroFatorAritmeticoAccess().getRule();
	}
	
	//FatorAritmetico:
	//    ('^')? ref=[Variavel]  // CORRIGIDO: Aponta para Variavel
	//  | numero=INT
	//  | real=REAL
	//  | '(' exp=ExpressaoAritmetica ')'
	//  | str=STRING
	//;
	public FatorAritmeticoElements getFatorAritmeticoAccess() {
		return pFatorAritmetico;
	}
	
	public ParserRule getFatorAritmeticoRule() {
		return getFatorAritmeticoAccess().getRule();
	}
	
	//Expressao:
	//    logicos+=TermoLogico (op=OpBool logicos+=TermoLogico)*
	//;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//TermoLogico:
	//    ('nao')? rel=ExpressaoRelacional
	//;
	public TermoLogicoElements getTermoLogicoAccess() {
		return pTermoLogico;
	}
	
	public ParserRule getTermoLogicoRule() {
		return getTermoLogicoAccess().getRule();
	}
	
	//ExpressaoRelacional:
	//    left=ExpressaoAritmetica (op=OpRel right=ExpressaoAritmetica)?
	//;
	public ExpressaoRelacionalElements getExpressaoRelacionalAccess() {
		return pExpressaoRelacional;
	}
	
	public ParserRule getExpressaoRelacionalRule() {
		return getExpressaoRelacionalAccess().getRule();
	}
	
	//OpArit1:
	//    '+' | '-'
	//;
	public OpArit1Elements getOpArit1Access() {
		return pOpArit1;
	}
	
	public ParserRule getOpArit1Rule() {
		return getOpArit1Access().getRule();
	}
	
	//OpArit2:
	//    '*' | '/'
	//;
	public OpArit2Elements getOpArit2Access() {
		return pOpArit2;
	}
	
	public ParserRule getOpArit2Rule() {
		return getOpArit2Access().getRule();
	}
	
	//OpRel:
	//    '>' | '>=' | '<' | '<=' | '<>' | '='
	//;
	public OpRelElements getOpRelAccess() {
		return pOpRel;
	}
	
	public ParserRule getOpRelRule() {
		return getOpRelAccess().getRule();
	}
	
	//OpBool:
	//    'e' | 'ou'
	//;
	public OpBoolElements getOpBoolAccess() {
		return pOpBool;
	}
	
	public ParserRule getOpBoolRule() {
		return getOpBoolAccess().getRule();
	}
	
	//terminal REAL: INT '.' INT;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
