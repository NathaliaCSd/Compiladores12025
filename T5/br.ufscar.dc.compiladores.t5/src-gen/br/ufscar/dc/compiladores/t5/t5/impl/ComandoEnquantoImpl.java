/**
 * generated by Xtext 2.39.0
 */
package br.ufscar.dc.compiladores.t5.t5.impl;

import br.ufscar.dc.compiladores.t5.t5.Comando;
import br.ufscar.dc.compiladores.t5.t5.ComandoEnquanto;
import br.ufscar.dc.compiladores.t5.t5.Expressao;
import br.ufscar.dc.compiladores.t5.t5.T5Package;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Comando Enquanto</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufscar.dc.compiladores.t5.t5.impl.ComandoEnquantoImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link br.ufscar.dc.compiladores.t5.t5.impl.ComandoEnquantoImpl#getComandos <em>Comandos</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComandoEnquantoImpl extends ComandoImpl implements ComandoEnquanto
{
  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected Expressao cond;

  /**
   * The cached value of the '{@link #getComandos() <em>Comandos</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComandos()
   * @generated
   * @ordered
   */
  protected EList<Comando> comandos;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComandoEnquantoImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return T5Package.Literals.COMANDO_ENQUANTO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expressao getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(Expressao newCond, NotificationChain msgs)
  {
    Expressao oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, T5Package.COMANDO_ENQUANTO__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCond(Expressao newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - T5Package.COMANDO_ENQUANTO__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - T5Package.COMANDO_ENQUANTO__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, T5Package.COMANDO_ENQUANTO__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Comando> getComandos()
  {
    if (comandos == null)
    {
      comandos = new EObjectContainmentEList<Comando>(Comando.class, this, T5Package.COMANDO_ENQUANTO__COMANDOS);
    }
    return comandos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case T5Package.COMANDO_ENQUANTO__COND:
        return basicSetCond(null, msgs);
      case T5Package.COMANDO_ENQUANTO__COMANDOS:
        return ((InternalEList<?>)getComandos()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case T5Package.COMANDO_ENQUANTO__COND:
        return getCond();
      case T5Package.COMANDO_ENQUANTO__COMANDOS:
        return getComandos();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case T5Package.COMANDO_ENQUANTO__COND:
        setCond((Expressao)newValue);
        return;
      case T5Package.COMANDO_ENQUANTO__COMANDOS:
        getComandos().clear();
        getComandos().addAll((Collection<? extends Comando>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case T5Package.COMANDO_ENQUANTO__COND:
        setCond((Expressao)null);
        return;
      case T5Package.COMANDO_ENQUANTO__COMANDOS:
        getComandos().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case T5Package.COMANDO_ENQUANTO__COND:
        return cond != null;
      case T5Package.COMANDO_ENQUANTO__COMANDOS:
        return comandos != null && !comandos.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ComandoEnquantoImpl
