/**
 * generated by Xtext 2.39.0
 */
package br.ufscar.dc.compiladores.t5.generator;

import java.util.Objects;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;

@SuppressWarnings("all")
public class AlgumaGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field Programa is undefined"
      + "\nThe method compilePrograma(Programa) from the type AlgumaGenerator refers to the missing type Programa");
  }

  public CharSequence compilePrograma(final /* Programa */Object p) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getTipo(Declaracao) from the type AlgumaGenerator refers to the missing type Declaracao"
      + "\ndeclaracoes cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncomandos cannot be resolved"
      + "\ncompileComando cannot be resolved");
  }

  public String getTipo(final /* Declaracao */Object d) {
    throw new Error("Unresolved compilation problems:"
      + "\ntipo cannot be resolved"
      + "\n== cannot be resolved");
  }

  protected CharSequence _compileComando(final /* ComandoAtribuicao */Object c) {
    throw new Error("Unresolved compilation problems:"
      + "\nvariavel cannot be resolved"
      + "\nname cannot be resolved"
      + "\nexp cannot be resolved"
      + "\ncompileExpressao cannot be resolved");
  }

  protected CharSequence _compileComando(final /* ComandoEntrada */Object c) {
    throw new Error("Unresolved compilation problems:"
      + "\nvariavel cannot be resolved"
      + "\ntipo cannot be resolved"
      + "\n== cannot be resolved"
      + "\nvariavel cannot be resolved"
      + "\nname cannot be resolved"
      + "\nvariavel cannot be resolved"
      + "\ntipo cannot be resolved"
      + "\n== cannot be resolved"
      + "\nvariavel cannot be resolved"
      + "\nname cannot be resolved");
  }

  protected CharSequence _compileComando(final /* ComandoSaida */Object c) {
    throw new Error("Unresolved compilation problems:"
      + "\nvariavel cannot be resolved"
      + "\nname cannot be resolved");
  }

  protected CharSequence _compileComando(final /* ComandoCondicao */Object c) {
    throw new Error("Unresolved compilation problems:"
      + "\nexp cannot be resolved"
      + "\ncompileExpressaoRelacional cannot be resolved"
      + "\ncmd1 cannot be resolved"
      + "\ncompileComando cannot be resolved"
      + "\ncmd2 cannot be resolved"
      + "\n!== cannot be resolved"
      + "\ncmd2 cannot be resolved"
      + "\ncompileComando cannot be resolved");
  }

  protected CharSequence _compileComando(final /* ComandoRepeticao */Object c) {
    throw new Error("Unresolved compilation problems:"
      + "\nexp cannot be resolved"
      + "\ncompileExpressaoRelacional cannot be resolved"
      + "\ncmd cannot be resolved"
      + "\ncompileComando cannot be resolved");
  }

  protected CharSequence _compileComando(final /* SubAlgoritmo */Object s) {
    throw new Error("Unresolved compilation problems:"
      + "\ncomandos cannot be resolved"
      + "\ncompileComando cannot be resolved");
  }

  public StringConcatenation compileExpressao(final /* ExpressaoAritmetica */Object e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field operador is undefined for the type Object"
      + "\nThe method or field termo is undefined for the type Object"
      + "\nThere is no context to infer the closure\'s argument types from. Consider typing the arguments or put the closures into a typed context."
      + "\ntermo1 cannot be resolved"
      + "\ncompileTermo cannot be resolved"
      + "\noutrosTermos cannot be resolved"
      + "\nforEach cannot be resolved"
      + "\ncompileTermo cannot be resolved");
  }

  public StringConcatenation compileTermo(final /* TermoAritmetico */Object t) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field operador is undefined for the type Object"
      + "\nThe method or field fator is undefined for the type Object"
      + "\nThere is no context to infer the closure\'s argument types from. Consider typing the arguments or put the closures into a typed context."
      + "\nfator1 cannot be resolved"
      + "\ncompileFator cannot be resolved"
      + "\noutrosFatores cannot be resolved"
      + "\nforEach cannot be resolved"
      + "\ncompileFator cannot be resolved");
  }

  protected CharSequence _compileFator(final /* FatorNumero */Object fn) {
    throw new Error("Unresolved compilation problems:"
      + "\nnumero cannot be resolved");
  }

  protected CharSequence _compileFator(final /* FatorVariavel */Object fv) {
    throw new Error("Unresolved compilation problems:"
      + "\nvariavel cannot be resolved"
      + "\nname cannot be resolved");
  }

  protected CharSequence _compileFator(final /* FatorSubExpressao */Object fse) {
    throw new Error("Unresolved compilation problems:"
      + "\nexpressao cannot be resolved"
      + "\ncompileExpressao cannot be resolved");
  }

  public StringConcatenation compileExpressaoRelacional(final /* ExpressaoRelacional */Object e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field operador is undefined for the type Object"
      + "\nThe method or field termo is undefined for the type Object"
      + "\nThere is no context to infer the closure\'s argument types from. Consider typing the arguments or put the closures into a typed context."
      + "\ntermo1 cannot be resolved"
      + "\ncompileTermoRelacional cannot be resolved"
      + "\noutrosTermos cannot be resolved"
      + "\nforEach cannot be resolved"
      + "\ncompileOperadorBooleano cannot be resolved"
      + "\ncompileTermoRelacional cannot be resolved");
  }

  public String compileOperadorBooleano(final String s) {
    boolean _equals = Objects.equals(s, "E");
    if (_equals) {
      return "&&";
    } else {
      return "||";
    }
  }

  protected Object _compileTermoRelacional(final /* TermoComparacaoRelacional */Object tcr) {
    throw new Error("Unresolved compilation problems:"
      + "\nexp1 cannot be resolved"
      + "\ncompileExpressao cannot be resolved"
      + "\n+ cannot be resolved"
      + "\n+ cannot be resolved"
      + "\nopRel cannot be resolved"
      + "\ncompileOperadorRelacional cannot be resolved"
      + "\n+ cannot be resolved"
      + "\n+ cannot be resolved"
      + "\nexp2 cannot be resolved"
      + "\ncompileExpressao cannot be resolved");
  }

  public String compileOperadorRelacional(final String s) {
    boolean _equals = Objects.equals(s, "<");
    if (_equals) {
      return "<";
    } else {
      boolean _equals_1 = Objects.equals(s, "<=");
      if (_equals_1) {
        return "<=";
      } else {
        boolean _equals_2 = Objects.equals(s, ">");
        if (_equals_2) {
          return ">";
        } else {
          boolean _equals_3 = Objects.equals(s, ">=");
          if (_equals_3) {
            return ">=";
          } else {
            boolean _equals_4 = Objects.equals(s, "<>");
            if (_equals_4) {
              return "!=";
            } else {
              boolean _equals_5 = Objects.equals(s, "=");
              if (_equals_5) {
                return "==";
              }
            }
          }
        }
      }
    }
    return null;
  }

  protected Object _compileTermoRelacional(final /* TermoSubExpressaoRelacional */Object tser) {
    throw new Error("Unresolved compilation problems:"
      + "\nexpRel cannot be resolved");
  }

  @XbaseGenerated
  public CharSequence compileComando(final ComandoAtribuicao c) {
    return _compileComando(c);
  }

  @XbaseGenerated
  public CharSequence compileFator(final FatorNumero fn) {
    return _compileFator(fn);
  }

  @XbaseGenerated
  public Object compileTermoRelacional(final TermoComparacaoRelacional tcr) {
    return _compileTermoRelacional(tcr);
  }
}
