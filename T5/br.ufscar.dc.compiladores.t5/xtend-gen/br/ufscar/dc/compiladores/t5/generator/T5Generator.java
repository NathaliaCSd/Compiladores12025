/**
 * generated by Xtext 2.39.0
 * Corrigido para a gramática T5 - V2
 */
package br.ufscar.dc.compiladores.t5.generator;

import br.ufscar.dc.compiladores.t5.t5.Comando;
import br.ufscar.dc.compiladores.t5.t5.ComandoAtribuicao;
import br.ufscar.dc.compiladores.t5.t5.ComandoEnquanto;
import br.ufscar.dc.compiladores.t5.t5.ComandoEscreva;
import br.ufscar.dc.compiladores.t5.t5.ComandoFaca;
import br.ufscar.dc.compiladores.t5.t5.ComandoLeia;
import br.ufscar.dc.compiladores.t5.t5.ComandoSe;
import br.ufscar.dc.compiladores.t5.t5.Corpo;
import br.ufscar.dc.compiladores.t5.t5.Declaracao;
import br.ufscar.dc.compiladores.t5.t5.DeclaracaoGlobal;
import br.ufscar.dc.compiladores.t5.t5.DeclaracaoLocal;
import br.ufscar.dc.compiladores.t5.t5.Expressao;
import br.ufscar.dc.compiladores.t5.t5.ExpressaoAritmetica;
import br.ufscar.dc.compiladores.t5.t5.ExpressaoRelacional;
import br.ufscar.dc.compiladores.t5.t5.FatorAritmetico;
import br.ufscar.dc.compiladores.t5.t5.OutroFatorAritmetico;
import br.ufscar.dc.compiladores.t5.t5.OutroTermoAritmetico;
import br.ufscar.dc.compiladores.t5.t5.Programa;
import br.ufscar.dc.compiladores.t5.t5.TermoAritmetico;
import br.ufscar.dc.compiladores.t5.t5.TermoLogico;
import br.ufscar.dc.compiladores.t5.t5.Tipo;
import br.ufscar.dc.compiladores.t5.t5.TipoEstendido;
import br.ufscar.dc.compiladores.t5.t5.Variavel;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;

@SuppressWarnings("all")
public class T5Generator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Programa> _filter = Iterables.<Programa>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Programa.class);
    for (final Programa p : _filter) {
      fsa.generateFile("gen/Programa.java", this.compilePrograma(p));
    }
  }

  public CharSequence compilePrograma(final Programa p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Programa {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Scanner sc = new Scanner(System.in);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Declarações de variáveis globais");
    _builder.newLine();
    {
      EList<Declaracao> _declaracoes = p.getDeclaracoes();
      for(final Declaracao d : _declaracoes) {
        _builder.append("\t");
        CharSequence _compileDeclaracao = this.compileDeclaracao(d);
        _builder.append(_compileDeclaracao, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _compileCorpo = this.compileCorpo(p.getCorpo());
    _builder.append(_compileCorpo, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _compileDeclaracao(final DeclaracaoLocal d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = d.getVariaveis().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        {
          EList<Variavel> _variaveis = d.getVariaveis();
          for(final Variavel v : _variaveis) {
            _builder.append("// Usa v.id.name para obter o nome do identificador da variável");
            _builder.newLine();
            _builder.append("static ");
            String _tipoJava = this.getTipoJava(v.getTipoVar());
            _builder.append(_tipoJava);
            _builder.append(" ");
            String _name = v.getId().getName();
            _builder.append(_name);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }

  protected CharSequence _compileDeclaracao(final DeclaracaoGlobal d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public static void ");
    String _name = d.getName();
    _builder.append(_name);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public String getTipoJava(final Tipo t) {
    String _xblockexpression = null;
    {
      TipoEstendido _tipoExt = t.getTipoExt();
      String _basic = null;
      if (_tipoExt!=null) {
        _basic=_tipoExt.getBasic();
      }
      final String tipoBase = _basic;
      String _xifexpression = null;
      if ((tipoBase != null)) {
        String _switchResult = null;
        if (tipoBase != null) {
          switch (tipoBase) {
            case "inteiro":
              _switchResult = "int";
              break;
            case "real":
              _switchResult = "double";
              break;
            case "literal":
              _switchResult = "String";
              break;
            case "logico":
              _switchResult = "boolean";
              break;
            default:
              _switchResult = "Object";
              break;
          }
        } else {
          _switchResult = "Object";
        }
        _xifexpression = _switchResult;
      } else {
        _xifexpression = "Object";
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public String getTipoLeitura(final Variavel v) {
    String _xblockexpression = null;
    {
      TipoEstendido _tipoExt = v.getTipoVar().getTipoExt();
      String _basic = null;
      if (_tipoExt!=null) {
        _basic=_tipoExt.getBasic();
      }
      final String tipoBase = _basic;
      String _xifexpression = null;
      if ((tipoBase != null)) {
        String _switchResult = null;
        if (tipoBase != null) {
          switch (tipoBase) {
            case "inteiro":
              _switchResult = "sc.nextInt()";
              break;
            case "real":
              _switchResult = "sc.nextDouble()";
              break;
            case "literal":
              _switchResult = "sc.next()";
              break;
            case "logico":
              _switchResult = "sc.nextBoolean()";
              break;
            default:
              _switchResult = "sc.next()";
              break;
          }
        } else {
          _switchResult = "sc.next()";
        }
        _xifexpression = _switchResult;
      } else {
        _xifexpression = "sc.next()";
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public CharSequence compileCorpo(final Corpo c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando Comando : _comandos) {
        CharSequence _compileComando = this.compileComando(Comando);
        _builder.append(_compileComando);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoAtribuicao c) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = c.getTarget().getId().getName();
    _builder.append(_name);
    _builder.append(" = ");
    CharSequence _compileExpressao = this.compileExpressao(c.getValor());
    _builder.append(_compileExpressao);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoLeia c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Variavel> _alvo = c.getAlvo();
      for(final Variavel alvo : _alvo) {
        String _name = alvo.getId().getName();
        _builder.append(_name);
        _builder.append(" = ");
        String _tipoLeitura = this.getTipoLeitura(alvo);
        _builder.append(_tipoLeitura);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoEscreva c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expressao> _exp = c.getExp();
      for(final Expressao exp : _exp) {
        _builder.append("System.out.print(");
        CharSequence _compileExpressao = this.compileExpressao(exp);
        _builder.append(_compileExpressao);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("System.out.println(); // Adiciona uma nova linha no final");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoSe c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    CharSequence _compileExpressao = this.compileExpressao(c.getCond());
    _builder.append(_compileExpressao);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando cmd : _comandos) {
        _builder.append("\t");
        Object _compileComando = this.compileComando(cmd);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    {
      int _size = c.getComandosElse().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("else {");
        _builder.newLine();
        {
          EList<Comando> _comandosElse = c.getComandosElse();
          for(final Comando cmd_1 : _comandosElse) {
            _builder.append("\t");
            Object _compileComando_1 = this.compileComando(cmd_1);
            _builder.append(_compileComando_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoEnquanto c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while(");
    CharSequence _compileExpressao = this.compileExpressao(c.getCond());
    _builder.append(_compileExpressao);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando cmd : _comandos) {
        _builder.append("\t");
        Object _compileComando = this.compileComando(cmd);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoFaca c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("do {");
    _builder.newLine();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando cmd : _comandos) {
        _builder.append("\t");
        Object _compileComando = this.compileComando(cmd);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("} while(");
    CharSequence _compileExpressao = this.compileExpressao(c.getCond());
    _builder.append(_compileExpressao);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence compileExpressao(final Expressao e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileTermoLogico = this.compileTermoLogico(e.getLogicos().get(0));
    _builder.append(_compileTermoLogico);
    {
      int _size = e.getLogicos().size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        _builder.append(" ");
        String _compileOpBool = this.compileOpBool(e.getOp().get(((i).intValue() - 1)));
        _builder.append(_compileOpBool);
        _builder.append(" ");
        CharSequence _compileTermoLogico_1 = this.compileTermoLogico(e.getLogicos().get((i).intValue()));
        _builder.append(_compileTermoLogico_1);
      }
    }
    return _builder;
  }

  public CharSequence compileTermoLogico(final TermoLogico tl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isNao = tl.isNao();
      if (_isNao) {
        _builder.append("!");
      }
    }
    _builder.append("(");
    String _compileExpressaoRelacional = this.compileExpressaoRelacional(tl.getRel());
    _builder.append(_compileExpressaoRelacional);
    _builder.append(")");
    return _builder;
  }

  public String compileExpressaoRelacional(final ExpressaoRelacional er) {
    ExpressaoAritmetica _right = er.getRight();
    boolean _tripleNotEquals = (_right != null);
    if (_tripleNotEquals) {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _compileExpressaoAritmetica = this.compileExpressaoAritmetica(er.getLeft());
      _builder.append(_compileExpressaoAritmetica);
      _builder.append(" ");
      String _compileOpRel = this.compileOpRel(er.getOp());
      _builder.append(_compileOpRel);
      _builder.append(" ");
      CharSequence _compileExpressaoAritmetica_1 = this.compileExpressaoAritmetica(er.getRight());
      _builder.append(_compileExpressaoAritmetica_1);
      return _builder.toString();
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    CharSequence _compileExpressaoAritmetica_2 = this.compileExpressaoAritmetica(er.getLeft());
    _builder_1.append(_compileExpressaoAritmetica_2);
    return _builder_1.toString();
  }

  public CharSequence compileExpressaoAritmetica(final ExpressaoAritmetica e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileTermoAritmetico = this.compileTermoAritmetico(IterableExtensions.<TermoAritmetico>head(e.getTermos()));
    _builder.append(_compileTermoAritmetico);
    {
      EList<OutroTermoAritmetico> _outros = e.getOutros();
      for(final OutroTermoAritmetico ot : _outros) {
        _builder.append(" ");
        String _op = ot.getOp();
        _builder.append(_op);
        _builder.append(" ");
        CharSequence _compileTermoAritmetico_1 = this.compileTermoAritmetico(ot.getTermo());
        _builder.append(_compileTermoAritmetico_1);
      }
    }
    return _builder;
  }

  public CharSequence compileTermoAritmetico(final TermoAritmetico t) {
    StringConcatenation _builder = new StringConcatenation();
    String _compileFatorAritmetico = this.compileFatorAritmetico(IterableExtensions.<FatorAritmetico>head(t.getFatores()));
    _builder.append(_compileFatorAritmetico);
    {
      EList<OutroFatorAritmetico> _outros = t.getOutros();
      for(final OutroFatorAritmetico of : _outros) {
        _builder.append(" ");
        String _op = of.getOp();
        _builder.append(_op);
        _builder.append(" ");
        String _compileFatorAritmetico_1 = this.compileFatorAritmetico(of.getFator());
        _builder.append(_compileFatorAritmetico_1);
      }
    }
    return _builder;
  }

  public String compileFatorAritmetico(final FatorAritmetico f) {
    Variavel _ref = f.getRef();
    boolean _tripleNotEquals = (_ref != null);
    if (_tripleNotEquals) {
      return f.getRef().getId().getName();
    } else {
      String _str = f.getStr();
      boolean _tripleNotEquals_1 = (_str != null);
      if (_tripleNotEquals_1) {
        String _str_1 = f.getStr();
        String _plus = ("\"" + _str_1);
        return (_plus + "\"");
      } else {
        ExpressaoAritmetica _exp = f.getExp();
        boolean _tripleNotEquals_2 = (_exp != null);
        if (_tripleNotEquals_2) {
          CharSequence _compileExpressaoAritmetica = this.compileExpressaoAritmetica(f.getExp());
          String _plus_1 = ("(" + _compileExpressaoAritmetica);
          return (_plus_1 + ")");
        } else {
          String _real = f.getReal();
          boolean _notEquals = (!Objects.equals(_real, Double.valueOf(0.0)));
          if (_notEquals) {
            return String.valueOf(f.getReal());
          } else {
            int _numero = f.getNumero();
            boolean _notEquals_1 = (_numero != 0);
            if (_notEquals_1) {
              return String.valueOf(f.getNumero());
            }
          }
        }
      }
    }
    return "";
  }

  public String compileOpBool(final String op) {
    String _switchResult = null;
    if (op != null) {
      switch (op) {
        case "e":
          _switchResult = "&&";
          break;
        case "ou":
          _switchResult = "||";
          break;
        default:
          _switchResult = "";
          break;
      }
    } else {
      _switchResult = "";
    }
    return _switchResult;
  }

  public String compileOpRel(final String op) {
    String _switchResult = null;
    if (op != null) {
      switch (op) {
        case "=":
          _switchResult = "==";
          break;
        case "<>":
          _switchResult = "!=";
          break;
        default:
          _switchResult = op;
          break;
      }
    } else {
      _switchResult = op;
    }
    return _switchResult;
  }

  @XbaseGenerated
  public CharSequence compileDeclaracao(final Declaracao d) {
    if (d instanceof DeclaracaoGlobal) {
      return _compileDeclaracao((DeclaracaoGlobal)d);
    } else if (d instanceof DeclaracaoLocal) {
      return _compileDeclaracao((DeclaracaoLocal)d);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(d).toString());
    }
  }

  @XbaseGenerated
  public CharSequence compileComando(final Comando c) {
    if (c instanceof ComandoAtribuicao) {
      return _compileComando((ComandoAtribuicao)c);
    } else if (c instanceof ComandoEnquanto) {
      return _compileComando((ComandoEnquanto)c);
    } else if (c instanceof ComandoEscreva) {
      return _compileComando((ComandoEscreva)c);
    } else if (c instanceof ComandoFaca) {
      return _compileComando((ComandoFaca)c);
    } else if (c instanceof ComandoLeia) {
      return _compileComando((ComandoLeia)c);
    } else if (c instanceof ComandoSe) {
      return _compileComando((ComandoSe)c);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(c).toString());
    }
  }
}
