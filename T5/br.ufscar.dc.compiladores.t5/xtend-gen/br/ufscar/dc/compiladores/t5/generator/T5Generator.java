/**
 * generated by Xtext 2.39.0
 * Corrigido para a gramática T5 - V2
 */
package br.ufscar.dc.compiladores.t5.generator;

import br.ufscar.dc.compiladores.t5.t5.Comando;
import br.ufscar.dc.compiladores.t5.t5.ComandoAtribuicao;
import br.ufscar.dc.compiladores.t5.t5.ComandoEnquanto;
import br.ufscar.dc.compiladores.t5.t5.ComandoEscreva;
import br.ufscar.dc.compiladores.t5.t5.ComandoFaca;
import br.ufscar.dc.compiladores.t5.t5.ComandoLeia;
import br.ufscar.dc.compiladores.t5.t5.ComandoSe;
import br.ufscar.dc.compiladores.t5.t5.Declaracao;
import br.ufscar.dc.compiladores.t5.t5.DeclaracaoLocal;
import br.ufscar.dc.compiladores.t5.t5.Expressao;
import br.ufscar.dc.compiladores.t5.t5.ExpressaoAritmetica;
import br.ufscar.dc.compiladores.t5.t5.ExpressaoRelacional;
import br.ufscar.dc.compiladores.t5.t5.FatorAritmetico;
import br.ufscar.dc.compiladores.t5.t5.OutroFatorAritmetico;
import br.ufscar.dc.compiladores.t5.t5.OutroTermoAritmetico;
import br.ufscar.dc.compiladores.t5.t5.Programa;
import br.ufscar.dc.compiladores.t5.t5.TermoAritmetico;
import br.ufscar.dc.compiladores.t5.t5.TermoLogico;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;

@SuppressWarnings("all")
public class T5Generator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Programa> _filter = Iterables.<Programa>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Programa.class);
    for (final Programa p : _filter) {
      fsa.generateFile("gen/Programa.java", this.compilePrograma(p));
    }
  }

  public CharSequence compilePrograma(final Programa p) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method compileCorpo(Corpo) is undefined");
  }

  protected CharSequence _compileDeclaracao(final DeclaracaoLocal d) {
    throw new Error("Unresolved compilation problems:"
      + "\nno viable alternative at input \'«\'"
      + "\nno viable alternative at input \'FOR\'"
      + "\nThe method getTipoJava(Tipo) is undefined"
      + "\nThe method or field ID is undefined for the type Identificador");
  }

  protected CharSequence _compileComando(final ComandoAtribuicao c) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = c.getTarget().getName();
    _builder.append(_name);
    _builder.append(" = ");
    CharSequence _compileExpressao = this.compileExpressao(c.getValor());
    _builder.append(_compileExpressao);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoLeia c) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field name is undefined for the type Object"
      + "\nThe method getTipoLeitura(Variavel) is undefined"
      + "\nType mismatch: cannot convert from Declaracao to Iterable<?>");
  }

  protected CharSequence _compileComando(final ComandoEscreva c) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from Expressao to Iterable<?>"
      + "\nType mismatch: cannot convert from Object to Expressao");
  }

  protected CharSequence _compileComando(final ComandoSe c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    CharSequence _compileExpressao = this.compileExpressao(c.getCond());
    _builder.append(_compileExpressao);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando cmd : _comandos) {
        _builder.append("\t");
        Object _compileComando = this.compileComando(cmd);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    {
      int _size = c.getComandosElse().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("else {");
        _builder.newLine();
        {
          EList<Comando> _comandosElse = c.getComandosElse();
          for(final Comando cmd_1 : _comandosElse) {
            _builder.append("\t");
            Object _compileComando_1 = this.compileComando(cmd_1);
            _builder.append(_compileComando_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoEnquanto c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while(");
    CharSequence _compileExpressao = this.compileExpressao(c.getCond());
    _builder.append(_compileExpressao);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando cmd : _comandos) {
        _builder.append("\t");
        Object _compileComando = this.compileComando(cmd);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _compileComando(final ComandoFaca c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("do {");
    _builder.newLine();
    {
      EList<Comando> _comandos = c.getComandos();
      for(final Comando cmd : _comandos) {
        _builder.append("\t");
        Object _compileComando = this.compileComando(cmd);
        _builder.append(_compileComando, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("} while(");
    CharSequence _compileExpressao = this.compileExpressao(c.getCond());
    _builder.append(_compileExpressao);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence compileExpressao(final Expressao e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method get(int) is undefined for the type String");
  }

  public CharSequence compileTermoLogico(final TermoLogico tl) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field isNao is undefined for the type TermoLogico");
  }

  public String compileExpressaoRelacional(final ExpressaoRelacional er) {
    ExpressaoAritmetica _right = er.getRight();
    boolean _tripleNotEquals = (_right != null);
    if (_tripleNotEquals) {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _compileExpressaoAritmetica = this.compileExpressaoAritmetica(er.getLeft());
      _builder.append(_compileExpressaoAritmetica);
      _builder.append(" ");
      String _compileOpRel = this.compileOpRel(er.getOp());
      _builder.append(_compileOpRel);
      _builder.append(" ");
      CharSequence _compileExpressaoAritmetica_1 = this.compileExpressaoAritmetica(er.getRight());
      _builder.append(_compileExpressaoAritmetica_1);
      return _builder.toString();
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    CharSequence _compileExpressaoAritmetica_2 = this.compileExpressaoAritmetica(er.getLeft());
    _builder_1.append(_compileExpressaoAritmetica_2);
    return _builder_1.toString();
  }

  public CharSequence compileExpressaoAritmetica(final ExpressaoAritmetica e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileTermoAritmetico = this.compileTermoAritmetico(IterableExtensions.<TermoAritmetico>head(e.getTermos()));
    _builder.append(_compileTermoAritmetico);
    {
      EList<OutroTermoAritmetico> _outros = e.getOutros();
      for(final OutroTermoAritmetico ot : _outros) {
        _builder.append(" ");
        String _op = ot.getOp();
        _builder.append(_op);
        _builder.append(" ");
        CharSequence _compileTermoAritmetico_1 = this.compileTermoAritmetico(ot.getTermo());
        _builder.append(_compileTermoAritmetico_1);
      }
    }
    return _builder;
  }

  public CharSequence compileTermoAritmetico(final TermoAritmetico t) {
    StringConcatenation _builder = new StringConcatenation();
    String _compileFatorAritmetico = this.compileFatorAritmetico(IterableExtensions.<FatorAritmetico>head(t.getFatores()));
    _builder.append(_compileFatorAritmetico);
    {
      EList<OutroFatorAritmetico> _outros = t.getOutros();
      for(final OutroFatorAritmetico of : _outros) {
        _builder.append(" ");
        String _op = of.getOp();
        _builder.append(_op);
        _builder.append(" ");
        String _compileFatorAritmetico_1 = this.compileFatorAritmetico(of.getFator());
        _builder.append(_compileFatorAritmetico_1);
      }
    }
    return _builder;
  }

  public String compileFatorAritmetico(final FatorAritmetico f) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field STRING is undefined for the type FatorAritmetico"
      + "\nThe method or field STRING is undefined for the type FatorAritmetico"
      + "\nThe operator \'!==\' is undefined for the argument types int and null"
      + "\n!== cannot be resolved");
  }

  public String compileOpBool(final String op) {
    String _switchResult = null;
    if (op != null) {
      switch (op) {
        case "e":
          _switchResult = "&&";
          break;
        case "ou":
          _switchResult = "||";
          break;
        default:
          _switchResult = "";
          break;
      }
    } else {
      _switchResult = "";
    }
    return _switchResult;
  }

  public String compileOpRel(final String op) {
    String _switchResult = null;
    if (op != null) {
      switch (op) {
        case "=":
          _switchResult = "==";
          break;
        case "<>":
          _switchResult = "!=";
          break;
        default:
          _switchResult = op;
          break;
      }
    } else {
      _switchResult = op;
    }
    return _switchResult;
  }

  protected CharSequence _compileDeclaracao(final Declaracao d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Declaração não tratada: ");
    String _name = d.eClass().getName();
    _builder.append(_name);
    return _builder;
  }

  protected CharSequence _compileComando(final Object o) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field eClass is undefined for the type Object"
      + "\nname cannot be resolved");
  }

  @XbaseGenerated
  public CharSequence compileDeclaracao(final Declaracao d) {
    if (d instanceof DeclaracaoLocal) {
      return _compileDeclaracao((DeclaracaoLocal)d);
    } else if (d != null) {
      return _compileDeclaracao(d);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(d).toString());
    }
  }

  @XbaseGenerated
  public CharSequence compileComando(final Object c) {
    throw new Error("Unresolved compilation problems:"
      + "\nno viable alternative at input \'def\'");
  }
}
